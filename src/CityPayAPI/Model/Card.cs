/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// Card
    /// </summary>
    [DataContract(Name = "Card")]
    public partial class Card : IEquatable<Card>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="binCommercial">Defines whether the card is a commercial card..</param>
        /// <param name="binCorporate">Defines whether the card is a corporate business card..</param>
        /// <param name="binCountryIssued">The determined country where the card was issued..</param>
        /// <param name="binCredit">Defines whether the card is a credit card..</param>
        /// <param name="binCurrency">The default currency determined for the card..</param>
        /// <param name="binDebit">Defines whether the card is a debit card..</param>
        /// <param name="binDescription">A description of the bin on the card to identify what type of product the card is..</param>
        /// <param name="binEu">Defines whether the card is regulated within the EU..</param>
        /// <param name="cardId">The id of the card that is returned. Should be used for referencing the card when perform any changes..</param>
        /// <param name="cardStatus">The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. .</param>
        /// <param name="dateCreated">The date time of when the card was created..</param>
        /// <param name="_default">Determines if the card is the default card for the account and should be regarded as the first option to be used for processing..</param>
        /// <param name="expmonth">The expiry month of the card..</param>
        /// <param name="expyear">The expiry year of the card..</param>
        /// <param name="label">A label which identifies this card..</param>
        /// <param name="label2">A label which also provides the expiry date of the card..</param>
        /// <param name="last4digits">The last 4 digits of the card to aid in identification..</param>
        /// <param name="nameOnCard">The name on the card..</param>
        /// <param name="scheme">The scheme that issued the card..</param>
        /// <param name="token">A token that can be used to process against the card..</param>
        public Card(bool binCommercial = default(bool), bool binCorporate = default(bool), string binCountryIssued = default(string), bool binCredit = default(bool), string binCurrency = default(string), bool binDebit = default(bool), string binDescription = default(string), bool binEu = default(bool), string cardId = default(string), string cardStatus = default(string), DateTime dateCreated = default(DateTime), bool _default = default(bool), int expmonth = default(int), int expyear = default(int), string label = default(string), string label2 = default(string), string last4digits = default(string), string nameOnCard = default(string), string scheme = default(string), string token = default(string))
        {
            this.BinCommercial = binCommercial;
            this.BinCorporate = binCorporate;
            this.BinCountryIssued = binCountryIssued;
            this.BinCredit = binCredit;
            this.BinCurrency = binCurrency;
            this.BinDebit = binDebit;
            this.BinDescription = binDescription;
            this.BinEu = binEu;
            this.CardId = cardId;
            this.CardStatus = cardStatus;
            this.DateCreated = dateCreated;
            this.Default = _default;
            this.Expmonth = expmonth;
            this.Expyear = expyear;
            this.Label = label;
            this.Label2 = label2;
            this.Last4digits = last4digits;
            this.NameOnCard = nameOnCard;
            this.Scheme = scheme;
            this.Token = token;
        }

        /// <summary>
        /// Defines whether the card is a commercial card.
        /// </summary>
        /// <value>Defines whether the card is a commercial card.</value>
        [DataMember(Name = "bin_commercial", EmitDefaultValue = true)]
        public bool BinCommercial { get; set; }

        /// <summary>
        /// Defines whether the card is a corporate business card.
        /// </summary>
        /// <value>Defines whether the card is a corporate business card.</value>
        [DataMember(Name = "bin_corporate", EmitDefaultValue = true)]
        public bool BinCorporate { get; set; }

        /// <summary>
        /// The determined country where the card was issued.
        /// </summary>
        /// <value>The determined country where the card was issued.</value>
        [DataMember(Name = "bin_country_issued", EmitDefaultValue = false)]
        public string BinCountryIssued { get; set; }

        /// <summary>
        /// Defines whether the card is a credit card.
        /// </summary>
        /// <value>Defines whether the card is a credit card.</value>
        [DataMember(Name = "bin_credit", EmitDefaultValue = true)]
        public bool BinCredit { get; set; }

        /// <summary>
        /// The default currency determined for the card.
        /// </summary>
        /// <value>The default currency determined for the card.</value>
        [DataMember(Name = "bin_currency", EmitDefaultValue = false)]
        public string BinCurrency { get; set; }

        /// <summary>
        /// Defines whether the card is a debit card.
        /// </summary>
        /// <value>Defines whether the card is a debit card.</value>
        [DataMember(Name = "bin_debit", EmitDefaultValue = true)]
        public bool BinDebit { get; set; }

        /// <summary>
        /// A description of the bin on the card to identify what type of product the card is.
        /// </summary>
        /// <value>A description of the bin on the card to identify what type of product the card is.</value>
        [DataMember(Name = "bin_description", EmitDefaultValue = false)]
        public string BinDescription { get; set; }

        /// <summary>
        /// Defines whether the card is regulated within the EU.
        /// </summary>
        /// <value>Defines whether the card is regulated within the EU.</value>
        [DataMember(Name = "bin_eu", EmitDefaultValue = true)]
        public bool BinEu { get; set; }

        /// <summary>
        /// The id of the card that is returned. Should be used for referencing the card when perform any changes.
        /// </summary>
        /// <value>The id of the card that is returned. Should be used for referencing the card when perform any changes.</value>
        [DataMember(Name = "card_id", EmitDefaultValue = false)]
        public string CardId { get; set; }

        /// <summary>
        /// The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. 
        /// </summary>
        /// <value>The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. </value>
        [DataMember(Name = "card_status", EmitDefaultValue = false)]
        public string CardStatus { get; set; }

        /// <summary>
        /// The date time of when the card was created.
        /// </summary>
        /// <value>The date time of when the card was created.</value>
        [DataMember(Name = "date_created", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.
        /// </summary>
        /// <value>Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.</value>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default { get; set; }

        /// <summary>
        /// The expiry month of the card.
        /// </summary>
        /// <value>The expiry month of the card.</value>
        [DataMember(Name = "expmonth", EmitDefaultValue = false)]
        public int Expmonth { get; set; }

        /// <summary>
        /// The expiry year of the card.
        /// </summary>
        /// <value>The expiry year of the card.</value>
        [DataMember(Name = "expyear", EmitDefaultValue = false)]
        public int Expyear { get; set; }

        /// <summary>
        /// A label which identifies this card.
        /// </summary>
        /// <value>A label which identifies this card.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// A label which also provides the expiry date of the card.
        /// </summary>
        /// <value>A label which also provides the expiry date of the card.</value>
        [DataMember(Name = "label2", EmitDefaultValue = false)]
        public string Label2 { get; set; }

        /// <summary>
        /// The last 4 digits of the card to aid in identification.
        /// </summary>
        /// <value>The last 4 digits of the card to aid in identification.</value>
        [DataMember(Name = "last4digits", EmitDefaultValue = false)]
        public string Last4digits { get; set; }

        /// <summary>
        /// The name on the card.
        /// </summary>
        /// <value>The name on the card.</value>
        [DataMember(Name = "name_on_card", EmitDefaultValue = false)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// The scheme that issued the card.
        /// </summary>
        /// <value>The scheme that issued the card.</value>
        [DataMember(Name = "scheme", EmitDefaultValue = false)]
        public string Scheme { get; set; }

        /// <summary>
        /// A token that can be used to process against the card.
        /// </summary>
        /// <value>A token that can be used to process against the card.</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  BinCommercial: ").Append(BinCommercial).Append("\n");
            sb.Append("  BinCorporate: ").Append(BinCorporate).Append("\n");
            sb.Append("  BinCountryIssued: ").Append(BinCountryIssued).Append("\n");
            sb.Append("  BinCredit: ").Append(BinCredit).Append("\n");
            sb.Append("  BinCurrency: ").Append(BinCurrency).Append("\n");
            sb.Append("  BinDebit: ").Append(BinDebit).Append("\n");
            sb.Append("  BinDescription: ").Append(BinDescription).Append("\n");
            sb.Append("  BinEu: ").Append(BinEu).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  CardStatus: ").Append(CardStatus).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Expmonth: ").Append(Expmonth).Append("\n");
            sb.Append("  Expyear: ").Append(Expyear).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Label2: ").Append(Label2).Append("\n");
            sb.Append("  Last4digits: ").Append(Last4digits).Append("\n");
            sb.Append("  NameOnCard: ").Append(NameOnCard).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Card);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="input">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BinCommercial == input.BinCommercial ||
                    this.BinCommercial.Equals(input.BinCommercial)
                ) && 
                (
                    this.BinCorporate == input.BinCorporate ||
                    this.BinCorporate.Equals(input.BinCorporate)
                ) && 
                (
                    this.BinCountryIssued == input.BinCountryIssued ||
                    (this.BinCountryIssued != null &&
                    this.BinCountryIssued.Equals(input.BinCountryIssued))
                ) && 
                (
                    this.BinCredit == input.BinCredit ||
                    this.BinCredit.Equals(input.BinCredit)
                ) && 
                (
                    this.BinCurrency == input.BinCurrency ||
                    (this.BinCurrency != null &&
                    this.BinCurrency.Equals(input.BinCurrency))
                ) && 
                (
                    this.BinDebit == input.BinDebit ||
                    this.BinDebit.Equals(input.BinDebit)
                ) && 
                (
                    this.BinDescription == input.BinDescription ||
                    (this.BinDescription != null &&
                    this.BinDescription.Equals(input.BinDescription))
                ) && 
                (
                    this.BinEu == input.BinEu ||
                    this.BinEu.Equals(input.BinEu)
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.CardStatus == input.CardStatus ||
                    (this.CardStatus != null &&
                    this.CardStatus.Equals(input.CardStatus))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.Default == input.Default ||
                    this.Default.Equals(input.Default)
                ) && 
                (
                    this.Expmonth == input.Expmonth ||
                    this.Expmonth.Equals(input.Expmonth)
                ) && 
                (
                    this.Expyear == input.Expyear ||
                    this.Expyear.Equals(input.Expyear)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Label2 == input.Label2 ||
                    (this.Label2 != null &&
                    this.Label2.Equals(input.Label2))
                ) && 
                (
                    this.Last4digits == input.Last4digits ||
                    (this.Last4digits != null &&
                    this.Last4digits.Equals(input.Last4digits))
                ) && 
                (
                    this.NameOnCard == input.NameOnCard ||
                    (this.NameOnCard != null &&
                    this.NameOnCard.Equals(input.NameOnCard))
                ) && 
                (
                    this.Scheme == input.Scheme ||
                    (this.Scheme != null &&
                    this.Scheme.Equals(input.Scheme))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BinCommercial.GetHashCode();
                hashCode = (hashCode * 59) + this.BinCorporate.GetHashCode();
                if (this.BinCountryIssued != null)
                {
                    hashCode = (hashCode * 59) + this.BinCountryIssued.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BinCredit.GetHashCode();
                if (this.BinCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.BinCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BinDebit.GetHashCode();
                if (this.BinDescription != null)
                {
                    hashCode = (hashCode * 59) + this.BinDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BinEu.GetHashCode();
                if (this.CardId != null)
                {
                    hashCode = (hashCode * 59) + this.CardId.GetHashCode();
                }
                if (this.CardStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CardStatus.GetHashCode();
                }
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Default.GetHashCode();
                hashCode = (hashCode * 59) + this.Expmonth.GetHashCode();
                hashCode = (hashCode * 59) + this.Expyear.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Label2 != null)
                {
                    hashCode = (hashCode * 59) + this.Label2.GetHashCode();
                }
                if (this.Last4digits != null)
                {
                    hashCode = (hashCode * 59) + this.Last4digits.GetHashCode();
                }
                if (this.NameOnCard != null)
                {
                    hashCode = (hashCode * 59) + this.NameOnCard.GetHashCode();
                }
                if (this.Scheme != null)
                {
                    hashCode = (hashCode * 59) + this.Scheme.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Expmonth (int) maximum
            if (this.Expmonth > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value less than or equal to 12.", new [] { "Expmonth" });
            }

            // Expmonth (int) minimum
            if (this.Expmonth < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value greater than or equal to 1.", new [] { "Expmonth" });
            }

            // Expyear (int) maximum
            if (this.Expyear > (int)2100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value less than or equal to 2100.", new [] { "Expyear" });
            }

            // Expyear (int) minimum
            if (this.Expyear < (int)2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value greater than or equal to 2000.", new [] { "Expyear" });
            }

            // NameOnCard (string) maxLength
            if (this.NameOnCard != null && this.NameOnCard.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOnCard, length must be less than 45.", new [] { "NameOnCard" });
            }

            // NameOnCard (string) minLength
            if (this.NameOnCard != null && this.NameOnCard.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOnCard, length must be greater than 2.", new [] { "NameOnCard" });
            }

            yield break;
        }
    }

}
