/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkTokenStatus
    /// </summary>
    [DataContract(Name = "PaylinkTokenStatus")]
    public partial class PaylinkTokenStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkTokenStatus" /> class.
        /// </summary>
        /// <param name="amountPaid">the amount that has been paid against the session..</param>
        /// <param name="authCode">an authorisation code if the transaction was processed and isPaid is true..</param>
        /// <param name="card">a description of the card that was used for payment if paid..</param>
        /// <param name="created">the date and time that the session was created..</param>
        /// <param name="datetime">the date and time of the current status..</param>
        /// <param name="identifier">the merchant identifier, to help identifying the token..</param>
        /// <param name="isAttachment">true if an attachment exists..</param>
        /// <param name="isCancelled">true if the session was cancelled either by the user or by a system request..</param>
        /// <param name="isClosed">true if the token has been closed..</param>
        /// <param name="isCustomerReceiptEmailSent">true if a customer receipt has been sent..</param>
        /// <param name="isEmailSent">true if an email was sent..</param>
        /// <param name="isExpired">true if the session has expired..</param>
        /// <param name="isFormViewed">true if the form was ever displayed to the addressee..</param>
        /// <param name="isMerchantNotificationEmailSent">true if a merchant notification receipt was sent..</param>
        /// <param name="isOpenForPayment">true if the session is still open for payment or false if it has been closed..</param>
        /// <param name="isPaid">whether the session has been paid and therefore can be considered as complete..</param>
        /// <param name="isPaymentAttempted">true if payment has been attempted..</param>
        /// <param name="isPostbackOk">true if a post back was executed successfully..</param>
        /// <param name="isRequestChallenged">true if the request has been challenged using 3-D Secure..</param>
        /// <param name="isSmsSent">true if an SMS was sent..</param>
        /// <param name="isValidated">whether the token generation was successfully validated..</param>
        /// <param name="lastEventDateTime">the date and time that the session last had an event actioned against it..</param>
        /// <param name="lastPaymentResult">the result of the last payment if one exists..</param>
        /// <param name="mid">identifies the merchant account..</param>
        /// <param name="paymentAttemptsCount">the number of attempts made to pay..</param>
        /// <param name="stateHistory">stateHistory.</param>
        /// <param name="token">the token value which uniquely identifies the session..</param>
        /// <param name="transNo">a transaction number if the transacstion was processed and isPaid is true..</param>
        public PaylinkTokenStatus(int amountPaid = default(int), string authCode = default(string), string card = default(string), DateTime created = default(DateTime), DateTime datetime = default(DateTime), string identifier = default(string), bool isAttachment = default(bool), bool isCancelled = default(bool), bool isClosed = default(bool), bool isCustomerReceiptEmailSent = default(bool), bool isEmailSent = default(bool), bool isExpired = default(bool), bool isFormViewed = default(bool), bool isMerchantNotificationEmailSent = default(bool), bool isOpenForPayment = default(bool), bool isPaid = default(bool), bool isPaymentAttempted = default(bool), bool isPostbackOk = default(bool), bool isRequestChallenged = default(bool), bool isSmsSent = default(bool), bool isValidated = default(bool), DateTime lastEventDateTime = default(DateTime), string lastPaymentResult = default(string), string mid = default(string), int paymentAttemptsCount = default(int), List<PaylinkStateEvent> stateHistory = default(List<PaylinkStateEvent>), string token = default(string), int transNo = default(int))
        {
            this.AmountPaid = amountPaid;
            this.AuthCode = authCode;
            this.Card = card;
            this.Created = created;
            this.Datetime = datetime;
            this.Identifier = identifier;
            this.IsAttachment = isAttachment;
            this.IsCancelled = isCancelled;
            this.IsClosed = isClosed;
            this.IsCustomerReceiptEmailSent = isCustomerReceiptEmailSent;
            this.IsEmailSent = isEmailSent;
            this.IsExpired = isExpired;
            this.IsFormViewed = isFormViewed;
            this.IsMerchantNotificationEmailSent = isMerchantNotificationEmailSent;
            this.IsOpenForPayment = isOpenForPayment;
            this.IsPaid = isPaid;
            this.IsPaymentAttempted = isPaymentAttempted;
            this.IsPostbackOk = isPostbackOk;
            this.IsRequestChallenged = isRequestChallenged;
            this.IsSmsSent = isSmsSent;
            this.IsValidated = isValidated;
            this.LastEventDateTime = lastEventDateTime;
            this.LastPaymentResult = lastPaymentResult;
            this.Mid = mid;
            this.PaymentAttemptsCount = paymentAttemptsCount;
            this.StateHistory = stateHistory;
            this.Token = token;
            this.TransNo = transNo;
        }

        /// <summary>
        /// the amount that has been paid against the session.
        /// </summary>
        /// <value>the amount that has been paid against the session.</value>
        [DataMember(Name = "amount_paid", EmitDefaultValue = false)]
        public int AmountPaid { get; set; }

        /// <summary>
        /// an authorisation code if the transaction was processed and isPaid is true.
        /// </summary>
        /// <value>an authorisation code if the transaction was processed and isPaid is true.</value>
        [DataMember(Name = "auth_code", EmitDefaultValue = false)]
        public string AuthCode { get; set; }

        /// <summary>
        /// a description of the card that was used for payment if paid.
        /// </summary>
        /// <value>a description of the card that was used for payment if paid.</value>
        [DataMember(Name = "card", EmitDefaultValue = false)]
        public string Card { get; set; }

        /// <summary>
        /// the date and time that the session was created.
        /// </summary>
        /// <value>the date and time that the session was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the date and time of the current status.
        /// </summary>
        /// <value>the date and time of the current status.</value>
        [DataMember(Name = "datetime", EmitDefaultValue = false)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// the merchant identifier, to help identifying the token.
        /// </summary>
        /// <value>the merchant identifier, to help identifying the token.</value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// true if an attachment exists.
        /// </summary>
        /// <value>true if an attachment exists.</value>
        [DataMember(Name = "is_attachment", EmitDefaultValue = true)]
        public bool IsAttachment { get; set; }

        /// <summary>
        /// true if the session was cancelled either by the user or by a system request.
        /// </summary>
        /// <value>true if the session was cancelled either by the user or by a system request.</value>
        [DataMember(Name = "is_cancelled", EmitDefaultValue = true)]
        public bool IsCancelled { get; set; }

        /// <summary>
        /// true if the token has been closed.
        /// </summary>
        /// <value>true if the token has been closed.</value>
        [DataMember(Name = "is_closed", EmitDefaultValue = true)]
        public bool IsClosed { get; set; }

        /// <summary>
        /// true if a customer receipt has been sent.
        /// </summary>
        /// <value>true if a customer receipt has been sent.</value>
        [DataMember(Name = "is_customer_receipt_email_sent", EmitDefaultValue = true)]
        public bool IsCustomerReceiptEmailSent { get; set; }

        /// <summary>
        /// true if an email was sent.
        /// </summary>
        /// <value>true if an email was sent.</value>
        [DataMember(Name = "is_email_sent", EmitDefaultValue = true)]
        public bool IsEmailSent { get; set; }

        /// <summary>
        /// true if the session has expired.
        /// </summary>
        /// <value>true if the session has expired.</value>
        [DataMember(Name = "is_expired", EmitDefaultValue = true)]
        public bool IsExpired { get; set; }

        /// <summary>
        /// true if the form was ever displayed to the addressee.
        /// </summary>
        /// <value>true if the form was ever displayed to the addressee.</value>
        [DataMember(Name = "is_form_viewed", EmitDefaultValue = true)]
        public bool IsFormViewed { get; set; }

        /// <summary>
        /// true if a merchant notification receipt was sent.
        /// </summary>
        /// <value>true if a merchant notification receipt was sent.</value>
        [DataMember(Name = "is_merchant_notification_email_sent", EmitDefaultValue = true)]
        public bool IsMerchantNotificationEmailSent { get; set; }

        /// <summary>
        /// true if the session is still open for payment or false if it has been closed.
        /// </summary>
        /// <value>true if the session is still open for payment or false if it has been closed.</value>
        [DataMember(Name = "is_open_for_payment", EmitDefaultValue = true)]
        public bool IsOpenForPayment { get; set; }

        /// <summary>
        /// whether the session has been paid and therefore can be considered as complete.
        /// </summary>
        /// <value>whether the session has been paid and therefore can be considered as complete.</value>
        [DataMember(Name = "is_paid", EmitDefaultValue = true)]
        public bool IsPaid { get; set; }

        /// <summary>
        /// true if payment has been attempted.
        /// </summary>
        /// <value>true if payment has been attempted.</value>
        [DataMember(Name = "is_payment_attempted", EmitDefaultValue = true)]
        public bool IsPaymentAttempted { get; set; }

        /// <summary>
        /// true if a post back was executed successfully.
        /// </summary>
        /// <value>true if a post back was executed successfully.</value>
        [DataMember(Name = "is_postback_ok", EmitDefaultValue = true)]
        public bool IsPostbackOk { get; set; }

        /// <summary>
        /// true if the request has been challenged using 3-D Secure.
        /// </summary>
        /// <value>true if the request has been challenged using 3-D Secure.</value>
        [DataMember(Name = "is_request_challenged", EmitDefaultValue = true)]
        public bool IsRequestChallenged { get; set; }

        /// <summary>
        /// true if an SMS was sent.
        /// </summary>
        /// <value>true if an SMS was sent.</value>
        [DataMember(Name = "is_sms_sent", EmitDefaultValue = true)]
        public bool IsSmsSent { get; set; }

        /// <summary>
        /// whether the token generation was successfully validated.
        /// </summary>
        /// <value>whether the token generation was successfully validated.</value>
        [DataMember(Name = "is_validated", EmitDefaultValue = true)]
        public bool IsValidated { get; set; }

        /// <summary>
        /// the date and time that the session last had an event actioned against it.
        /// </summary>
        /// <value>the date and time that the session last had an event actioned against it.</value>
        [DataMember(Name = "last_event_date_time", EmitDefaultValue = false)]
        public DateTime LastEventDateTime { get; set; }

        /// <summary>
        /// the result of the last payment if one exists.
        /// </summary>
        /// <value>the result of the last payment if one exists.</value>
        [DataMember(Name = "last_payment_result", EmitDefaultValue = false)]
        public string LastPaymentResult { get; set; }

        /// <summary>
        /// identifies the merchant account.
        /// </summary>
        /// <value>identifies the merchant account.</value>
        [DataMember(Name = "mid", EmitDefaultValue = false)]
        public string Mid { get; set; }

        /// <summary>
        /// the number of attempts made to pay.
        /// </summary>
        /// <value>the number of attempts made to pay.</value>
        [DataMember(Name = "payment_attempts_count", EmitDefaultValue = false)]
        public int PaymentAttemptsCount { get; set; }

        /// <summary>
        /// Gets or Sets StateHistory
        /// </summary>
        [DataMember(Name = "state_history", EmitDefaultValue = false)]
        public List<PaylinkStateEvent> StateHistory { get; set; }

        /// <summary>
        /// the token value which uniquely identifies the session.
        /// </summary>
        /// <value>the token value which uniquely identifies the session.</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// a transaction number if the transacstion was processed and isPaid is true.
        /// </summary>
        /// <value>a transaction number if the transacstion was processed and isPaid is true.</value>
        [DataMember(Name = "trans_no", EmitDefaultValue = false)]
        public int TransNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkTokenStatus {\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  IsAttachment: ").Append(IsAttachment).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsClosed: ").Append(IsClosed).Append("\n");
            sb.Append("  IsCustomerReceiptEmailSent: ").Append(IsCustomerReceiptEmailSent).Append("\n");
            sb.Append("  IsEmailSent: ").Append(IsEmailSent).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  IsFormViewed: ").Append(IsFormViewed).Append("\n");
            sb.Append("  IsMerchantNotificationEmailSent: ").Append(IsMerchantNotificationEmailSent).Append("\n");
            sb.Append("  IsOpenForPayment: ").Append(IsOpenForPayment).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("  IsPaymentAttempted: ").Append(IsPaymentAttempted).Append("\n");
            sb.Append("  IsPostbackOk: ").Append(IsPostbackOk).Append("\n");
            sb.Append("  IsRequestChallenged: ").Append(IsRequestChallenged).Append("\n");
            sb.Append("  IsSmsSent: ").Append(IsSmsSent).Append("\n");
            sb.Append("  IsValidated: ").Append(IsValidated).Append("\n");
            sb.Append("  LastEventDateTime: ").Append(LastEventDateTime).Append("\n");
            sb.Append("  LastPaymentResult: ").Append(LastPaymentResult).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  PaymentAttemptsCount: ").Append(PaymentAttemptsCount).Append("\n");
            sb.Append("  StateHistory: ").Append(StateHistory).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TransNo: ").Append(TransNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
