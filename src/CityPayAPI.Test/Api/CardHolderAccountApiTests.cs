/* 
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CityPayAPI.Client;
using CityPayAPI.Api;
using CityPayAPI.Model;

namespace CityPayAPI.Test
{
    /// <summary>
    ///  Class for testing CardHolderAccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CardHolderAccountApiTests : IDisposable
    {
        private CardHolderAccountApi instance;

        public CardHolderAccountApiTests()
        {
            instance = new CardHolderAccountApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CardHolderAccountApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CardHolderAccountApi
            //Assert.IsType(typeof(CardHolderAccountApi), instance, "instance is a CardHolderAccountApi");
        }

        
        /// <summary>
        /// Test AccountCardDeleteRequest
        /// </summary>
        [Fact]
        public void AccountCardDeleteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //string cardId = null;
            //var response = instance.AccountCardDeleteRequest(accountid, cardId);
            //Assert.IsType<Acknowledgement> (response, "response is Acknowledgement");
        }
        
        /// <summary>
        /// Test AccountCardRegisterRequest
        /// </summary>
        [Fact]
        public void AccountCardRegisterRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //RegisterCard registerCard = null;
            //var response = instance.AccountCardRegisterRequest(accountid, registerCard);
            //Assert.IsType<CardHolderAccount> (response, "response is CardHolderAccount");
        }
        
        /// <summary>
        /// Test AccountCardStatusRequest
        /// </summary>
        [Fact]
        public void AccountCardStatusRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //string cardId = null;
            //string status = null;
            //var response = instance.AccountCardStatusRequest(accountid, cardId, status);
            //Assert.IsType<Acknowledgement> (response, "response is Acknowledgement");
        }
        
        /// <summary>
        /// Test AccountChangeContactRequest
        /// </summary>
        [Fact]
        public void AccountChangeContactRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //ContactDetails contactDetails = null;
            //var response = instance.AccountChangeContactRequest(accountid, contactDetails);
            //Assert.IsType<CardHolderAccount> (response, "response is CardHolderAccount");
        }
        
        /// <summary>
        /// Test AccountCreate
        /// </summary>
        [Fact]
        public void AccountCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountCreate accountCreate = null;
            //var response = instance.AccountCreate(accountCreate);
            //Assert.IsType<CardHolderAccount> (response, "response is CardHolderAccount");
        }
        
        /// <summary>
        /// Test AccountDeleteRequest
        /// </summary>
        [Fact]
        public void AccountDeleteRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.AccountDeleteRequest(accountid);
            //Assert.IsType<Acknowledgement> (response, "response is Acknowledgement");
        }
        
        /// <summary>
        /// Test AccountRetrieveRequest
        /// </summary>
        [Fact]
        public void AccountRetrieveRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.AccountRetrieveRequest(accountid);
            //Assert.IsType<CardHolderAccount> (response, "response is CardHolderAccount");
        }
        
        /// <summary>
        /// Test AccountStatusRequest
        /// </summary>
        [Fact]
        public void AccountStatusRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountid = null;
            //var response = instance.AccountStatusRequest(accountid);
            //Assert.IsType<Acknowledgement> (response, "response is Acknowledgement");
        }
        
        /// <summary>
        /// Test ChargeRequest
        /// </summary>
        [Fact]
        public void ChargeRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargeRequest chargeRequest = null;
            //var response = instance.ChargeRequest(chargeRequest);
            //Assert.IsType<Decision> (response, "response is Decision");
        }
        
    }

}
