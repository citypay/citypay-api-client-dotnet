/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// ThreeDSecure
    /// </summary>
    [DataContract(Name = "ThreeDSecure")]
    public partial class ThreeDSecure : IEquatable<ThreeDSecure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSecure" /> class.
        /// </summary>
        /// <param name="acceptHeaders">Required for 3DSv1. Optional if the &#x60;cp_bx&#x60; value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. .</param>
        /// <param name="cpBx">Required for 3DSv2.  Browser extension value produced by the citypay.js &#x60;bx&#x60; function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details. .</param>
        /// <param name="downgrade1">Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. .</param>
        /// <param name="merchantTermurl">A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. .</param>
        /// <param name="tdsPolicy">A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions will be enabled for 3DS processing   &#x60;2&#x60; to bypass. Transactions that are bypassed will switch off 3DS processing. .</param>
        /// <param name="userAgent">Required for 3DSv1.  Optional if the &#x60;cp_bx&#x60; value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. .</param>
        public ThreeDSecure(string acceptHeaders = default(string), string cpBx = default(string), bool downgrade1 = default(bool), string merchantTermurl = default(string), string tdsPolicy = default(string), string userAgent = default(string))
        {
            this.AcceptHeaders = acceptHeaders;
            this.CpBx = cpBx;
            this.Downgrade1 = downgrade1;
            this.MerchantTermurl = merchantTermurl;
            this.TdsPolicy = tdsPolicy;
            this.UserAgent = userAgent;
        }

        /// <summary>
        /// Required for 3DSv1. Optional if the &#x60;cp_bx&#x60; value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
        /// </summary>
        /// <value>Required for 3DSv1. Optional if the &#x60;cp_bx&#x60; value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. </value>
        [DataMember(Name = "accept_headers", EmitDefaultValue = false)]
        public string AcceptHeaders { get; set; }

        /// <summary>
        /// Required for 3DSv2.  Browser extension value produced by the citypay.js &#x60;bx&#x60; function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details. 
        /// </summary>
        /// <value>Required for 3DSv2.  Browser extension value produced by the citypay.js &#x60;bx&#x60; function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details. </value>
        [DataMember(Name = "cp_bx", EmitDefaultValue = false)]
        public string CpBx { get; set; }

        /// <summary>
        /// Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. 
        /// </summary>
        /// <value>Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. </value>
        [DataMember(Name = "downgrade1", EmitDefaultValue = true)]
        public bool Downgrade1 { get; set; }

        /// <summary>
        /// A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. 
        /// </summary>
        /// <value>A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. </value>
        [DataMember(Name = "merchant_termurl", EmitDefaultValue = false)]
        public string MerchantTermurl { get; set; }

        /// <summary>
        /// A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions will be enabled for 3DS processing   &#x60;2&#x60; to bypass. Transactions that are bypassed will switch off 3DS processing. 
        /// </summary>
        /// <value>A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions will be enabled for 3DS processing   &#x60;2&#x60; to bypass. Transactions that are bypassed will switch off 3DS processing. </value>
        [DataMember(Name = "tds_policy", EmitDefaultValue = false)]
        public string TdsPolicy { get; set; }

        /// <summary>
        /// Required for 3DSv1.  Optional if the &#x60;cp_bx&#x60; value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
        /// </summary>
        /// <value>Required for 3DSv1.  Optional if the &#x60;cp_bx&#x60; value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. </value>
        [DataMember(Name = "user_agent", EmitDefaultValue = false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThreeDSecure {\n");
            sb.Append("  AcceptHeaders: ").Append(AcceptHeaders).Append("\n");
            sb.Append("  CpBx: ").Append(CpBx).Append("\n");
            sb.Append("  Downgrade1: ").Append(Downgrade1).Append("\n");
            sb.Append("  MerchantTermurl: ").Append(MerchantTermurl).Append("\n");
            sb.Append("  TdsPolicy: ").Append(TdsPolicy).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSecure);
        }

        /// <summary>
        /// Returns true if ThreeDSecure instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSecure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSecure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptHeaders == input.AcceptHeaders ||
                    (this.AcceptHeaders != null &&
                    this.AcceptHeaders.Equals(input.AcceptHeaders))
                ) && 
                (
                    this.CpBx == input.CpBx ||
                    (this.CpBx != null &&
                    this.CpBx.Equals(input.CpBx))
                ) && 
                (
                    this.Downgrade1 == input.Downgrade1 ||
                    this.Downgrade1.Equals(input.Downgrade1)
                ) && 
                (
                    this.MerchantTermurl == input.MerchantTermurl ||
                    (this.MerchantTermurl != null &&
                    this.MerchantTermurl.Equals(input.MerchantTermurl))
                ) && 
                (
                    this.TdsPolicy == input.TdsPolicy ||
                    (this.TdsPolicy != null &&
                    this.TdsPolicy.Equals(input.TdsPolicy))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptHeaders != null)
                    hashCode = hashCode * 59 + this.AcceptHeaders.GetHashCode();
                if (this.CpBx != null)
                    hashCode = hashCode * 59 + this.CpBx.GetHashCode();
                hashCode = hashCode * 59 + this.Downgrade1.GetHashCode();
                if (this.MerchantTermurl != null)
                    hashCode = hashCode * 59 + this.MerchantTermurl.GetHashCode();
                if (this.TdsPolicy != null)
                    hashCode = hashCode * 59 + this.TdsPolicy.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
