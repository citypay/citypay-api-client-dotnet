/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// AuthRequest
    /// </summary>
    [DataContract(Name = "AuthRequest")]
    public partial class AuthRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRequest" /> class.
        /// </summary>
        /// <param name="airlineData">airlineData.</param>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195.  (required).</param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation. .</param>
        /// <param name="billTo">billTo.</param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored.  (required).</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm. .</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation. .</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency..</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass. .</param>
        /// <param name="eventManagement">eventManagement.</param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12.  (required).</param>
        /// <param name="expyear">The year of expiry of the card.  (required).</param>
        /// <param name="externalMpi">externalMpi.</param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different.  (required).</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation. .</param>
        /// <param name="mcc6012">mcc6012.</param>
        /// <param name="merchantid">Identifies the merchant account to perform processing for. (required).</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers. .</param>
        /// <param name="shipTo">shipTo.</param>
        /// <param name="tag">A \&quot;tag\&quot; is a label that you can attach to a payment authorization. Tags can help you group transactions together based on certain criteria, like a work job or a ticket number. They can also assist in filtering transactions when you&#39;re generating reports.  Multiple Tags You can add more than one tag to a transaction by separating them with commas.  Limitations There is a maximum limit of 3 tags that can be added to a single transaction. Each tag can be no longer than 20 characters and alphanumeric with no spaces.  Example: Let&#39;s say you&#39;re a software company and you have different teams working on various projects. When a team makes a purchase or incurs an expense, they can tag the transaction with the project name, the team name, and the type of expense.  Project Name: Project_X Team Name: Team_A Type of Expense: Hardware So, the tag for a transaction might look like: Project_X,Team_A,Hardware  This way, when you&#39;re looking at your financial reports, you can easily filter transactions based on these tags to see how much each project or team is spending on different types of expenses. .</param>
        /// <param name="threedsecure">threedsecure.</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id..</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field..</param>
        public AuthRequest(AirlineAdvice airlineData = default(AirlineAdvice), int amount = default(int), string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string cardnumber = default(string), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), EventDataModel eventManagement = default(EventDataModel), int expmonth = default(int), int expyear = default(int), ExternalMPI externalMpi = default(ExternalMPI), string identifier = default(string), string matchAvsa = default(string), MCC6012 mcc6012 = default(MCC6012), int merchantid = default(int), string nameOnCard = default(string), ContactDetails shipTo = default(ContactDetails), string tag = default(string), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string))
        {
            this.Amount = amount;
            // to ensure "cardnumber" is required (not null)
            if (cardnumber == null)
            {
                throw new ArgumentNullException("cardnumber is a required property for AuthRequest and cannot be null");
            }
            this.Cardnumber = cardnumber;
            this.Expmonth = expmonth;
            this.Expyear = expyear;
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for AuthRequest and cannot be null");
            }
            this.Identifier = identifier;
            this.Merchantid = merchantid;
            this.AirlineData = airlineData;
            this.AvsPostcodePolicy = avsPostcodePolicy;
            this.BillTo = billTo;
            this.Csc = csc;
            this.CscPolicy = cscPolicy;
            this.Currency = currency;
            this.DuplicatePolicy = duplicatePolicy;
            this.EventManagement = eventManagement;
            this.ExternalMpi = externalMpi;
            this.MatchAvsa = matchAvsa;
            this.Mcc6012 = mcc6012;
            this.NameOnCard = nameOnCard;
            this.ShipTo = shipTo;
            this.Tag = tag;
            this.Threedsecure = threedsecure;
            this.TransInfo = transInfo;
            this.TransType = transType;
        }

        /// <summary>
        /// Gets or Sets AirlineData
        /// </summary>
        [DataMember(Name = "airline_data", EmitDefaultValue = false)]
        public AirlineAdvice AirlineData { get; set; }

        /// <summary>
        /// The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. 
        /// </summary>
        /// <value>The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </value>
        /// <example>3600</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public int Amount { get; set; }

        /// <summary>
        /// A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation. 
        /// </summary>
        /// <value>A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation. </value>
        [DataMember(Name = "avs_postcode_policy", EmitDefaultValue = false)]
        public string AvsPostcodePolicy { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name = "bill_to", EmitDefaultValue = false)]
        public ContactDetails BillTo { get; set; }

        /// <summary>
        /// The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. 
        /// </summary>
        /// <value>The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </value>
        /// <example>4000 0000 0000 0002</example>
        [DataMember(Name = "cardnumber", IsRequired = true, EmitDefaultValue = true)]
        public string Cardnumber { get; set; }

        /// <summary>
        /// The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm. 
        /// </summary>
        /// <value>The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm. </value>
        /// <example>10</example>
        [DataMember(Name = "csc", EmitDefaultValue = false)]
        public string Csc { get; set; }

        /// <summary>
        /// A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation. 
        /// </summary>
        /// <value>A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation. </value>
        [DataMember(Name = "csc_policy", EmitDefaultValue = false)]
        public string CscPolicy { get; set; }

        /// <summary>
        /// The processing currency for the transaction. Will default to the merchant account currency.
        /// </summary>
        /// <value>The processing currency for the transaction. Will default to the merchant account currency.</value>
        /// <example>GBP</example>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass. 
        /// </summary>
        /// <value>A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass. </value>
        [DataMember(Name = "duplicate_policy", EmitDefaultValue = false)]
        public string DuplicatePolicy { get; set; }

        /// <summary>
        /// Gets or Sets EventManagement
        /// </summary>
        [DataMember(Name = "event_management", EmitDefaultValue = false)]
        public EventDataModel EventManagement { get; set; }

        /// <summary>
        /// The month of expiry of the card. The month value should be a numerical value between 1 and 12. 
        /// </summary>
        /// <value>The month of expiry of the card. The month value should be a numerical value between 1 and 12. </value>
        /// <example>9</example>
        [DataMember(Name = "expmonth", IsRequired = true, EmitDefaultValue = true)]
        public int Expmonth { get; set; }

        /// <summary>
        /// The year of expiry of the card. 
        /// </summary>
        /// <value>The year of expiry of the card. </value>
        /// <example>2027</example>
        [DataMember(Name = "expyear", IsRequired = true, EmitDefaultValue = true)]
        public int Expyear { get; set; }

        /// <summary>
        /// Gets or Sets ExternalMpi
        /// </summary>
        [DataMember(Name = "external_mpi", EmitDefaultValue = false)]
        public ExternalMPI ExternalMpi { get; set; }

        /// <summary>
        /// The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. 
        /// </summary>
        /// <value>The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </value>
        /// <example>95b857a1-5955-4b86-963c-5a6dbfc4fb95</example>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation. 
        /// </summary>
        /// <value>A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation. </value>
        [DataMember(Name = "match_avsa", EmitDefaultValue = false)]
        public string MatchAvsa { get; set; }

        /// <summary>
        /// Gets or Sets Mcc6012
        /// </summary>
        [DataMember(Name = "mcc6012", EmitDefaultValue = false)]
        public MCC6012 Mcc6012 { get; set; }

        /// <summary>
        /// Identifies the merchant account to perform processing for.
        /// </summary>
        /// <value>Identifies the merchant account to perform processing for.</value>
        /// <example>11223344</example>
        [DataMember(Name = "merchantid", IsRequired = true, EmitDefaultValue = true)]
        public int Merchantid { get; set; }

        /// <summary>
        /// The card holder name as appears on the card such as MR N E BODY. Required for some acquirers. 
        /// </summary>
        /// <value>The card holder name as appears on the card such as MR N E BODY. Required for some acquirers. </value>
        /// <example>MR NE BODY</example>
        [DataMember(Name = "name_on_card", EmitDefaultValue = false)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name = "ship_to", EmitDefaultValue = false)]
        public ContactDetails ShipTo { get; set; }

        /// <summary>
        /// A \&quot;tag\&quot; is a label that you can attach to a payment authorization. Tags can help you group transactions together based on certain criteria, like a work job or a ticket number. They can also assist in filtering transactions when you&#39;re generating reports.  Multiple Tags You can add more than one tag to a transaction by separating them with commas.  Limitations There is a maximum limit of 3 tags that can be added to a single transaction. Each tag can be no longer than 20 characters and alphanumeric with no spaces.  Example: Let&#39;s say you&#39;re a software company and you have different teams working on various projects. When a team makes a purchase or incurs an expense, they can tag the transaction with the project name, the team name, and the type of expense.  Project Name: Project_X Team Name: Team_A Type of Expense: Hardware So, the tag for a transaction might look like: Project_X,Team_A,Hardware  This way, when you&#39;re looking at your financial reports, you can easily filter transactions based on these tags to see how much each project or team is spending on different types of expenses. 
        /// </summary>
        /// <value>A \&quot;tag\&quot; is a label that you can attach to a payment authorization. Tags can help you group transactions together based on certain criteria, like a work job or a ticket number. They can also assist in filtering transactions when you&#39;re generating reports.  Multiple Tags You can add more than one tag to a transaction by separating them with commas.  Limitations There is a maximum limit of 3 tags that can be added to a single transaction. Each tag can be no longer than 20 characters and alphanumeric with no spaces.  Example: Let&#39;s say you&#39;re a software company and you have different teams working on various projects. When a team makes a purchase or incurs an expense, they can tag the transaction with the project name, the team name, and the type of expense.  Project Name: Project_X Team Name: Team_A Type of Expense: Hardware So, the tag for a transaction might look like: Project_X,Team_A,Hardware  This way, when you&#39;re looking at your financial reports, you can easily filter transactions based on these tags to see how much each project or team is spending on different types of expenses. </value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Threedsecure
        /// </summary>
        [DataMember(Name = "threedsecure", EmitDefaultValue = false)]
        public ThreeDSecure Threedsecure { get; set; }

        /// <summary>
        /// Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
        /// </summary>
        /// <value>Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.</value>
        [DataMember(Name = "trans_info", EmitDefaultValue = false)]
        public string TransInfo { get; set; }

        /// <summary>
        /// The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
        /// </summary>
        /// <value>The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.</value>
        [DataMember(Name = "trans_type", EmitDefaultValue = false)]
        public string TransType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthRequest {\n");
            sb.Append("  AirlineData: ").Append(AirlineData).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AvsPostcodePolicy: ").Append(AvsPostcodePolicy).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  Cardnumber: ").Append("******").Append("\n");
            sb.Append("  Csc: ").Append("***").Append("\n");
            sb.Append("  CscPolicy: ").Append(CscPolicy).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DuplicatePolicy: ").Append(DuplicatePolicy).Append("\n");
            sb.Append("  EventManagement: ").Append(EventManagement).Append("\n");
            sb.Append("  Expmonth: ").Append(Expmonth).Append("\n");
            sb.Append("  Expyear: ").Append(Expyear).Append("\n");
            sb.Append("  ExternalMpi: ").Append(ExternalMpi).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  MatchAvsa: ").Append(MatchAvsa).Append("\n");
            sb.Append("  Mcc6012: ").Append(Mcc6012).Append("\n");
            sb.Append("  Merchantid: ").Append(Merchantid).Append("\n");
            sb.Append("  NameOnCard: ").Append(NameOnCard).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Threedsecure: ").Append(Threedsecure).Append("\n");
            sb.Append("  TransInfo: ").Append(TransInfo).Append("\n");
            sb.Append("  TransType: ").Append(TransType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cardnumber (string) maxLength
            if (this.Cardnumber != null && this.Cardnumber.Length > 22)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cardnumber, length must be less than 22.", new [] { "Cardnumber" });
            }

            // Cardnumber (string) minLength
            if (this.Cardnumber != null && this.Cardnumber.Length < 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cardnumber, length must be greater than 12.", new [] { "Cardnumber" });
            }

            // Csc (string) maxLength
            if (this.Csc != null && this.Csc.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Csc, length must be less than 4.", new [] { "Csc" });
            }

            // Csc (string) minLength
            if (this.Csc != null && this.Csc.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Csc, length must be greater than 3.", new [] { "Csc" });
            }

            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 3.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 3.", new [] { "Currency" });
            }

            // Expmonth (int) maximum
            if (this.Expmonth > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value less than or equal to 12.", new [] { "Expmonth" });
            }

            // Expmonth (int) minimum
            if (this.Expmonth < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value greater than or equal to 1.", new [] { "Expmonth" });
            }

            // Expyear (int) maximum
            if (this.Expyear > (int)2100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value less than or equal to 2100.", new [] { "Expyear" });
            }

            // Expyear (int) minimum
            if (this.Expyear < (int)2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value greater than or equal to 2000.", new [] { "Expyear" });
            }

            // Identifier (string) maxLength
            if (this.Identifier != null && this.Identifier.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be less than 50.", new [] { "Identifier" });
            }

            // Identifier (string) minLength
            if (this.Identifier != null && this.Identifier.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be greater than 4.", new [] { "Identifier" });
            }

            // NameOnCard (string) maxLength
            if (this.NameOnCard != null && this.NameOnCard.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOnCard, length must be less than 45.", new [] { "NameOnCard" });
            }

            // NameOnCard (string) minLength
            if (this.NameOnCard != null && this.NameOnCard.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOnCard, length must be greater than 2.", new [] { "NameOnCard" });
            }

            // TransInfo (string) maxLength
            if (this.TransInfo != null && this.TransInfo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransInfo, length must be less than 50.", new [] { "TransInfo" });
            }

            // TransType (string) maxLength
            if (this.TransType != null && this.TransType.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransType, length must be less than 1.", new [] { "TransType" });
            }

            yield break;
        }
    }

}
