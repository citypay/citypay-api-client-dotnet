/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// EmailNotificationPath
    /// </summary>
    [DataContract(Name = "EmailNotificationPath")]
    public partial class EmailNotificationPath : IEquatable<EmailNotificationPath>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailNotificationPath" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailNotificationPath() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailNotificationPath" /> class.
        /// </summary>
        /// <param name="bcc">An array of email addresses to be used for blind carbon copy delivery. A maximum of 5 addresses can be added..</param>
        /// <param name="cc">An array of email addresses to be used for carbon copy delivery. A maximum of 5 addresses can be added..</param>
        /// <param name="channel">Should be specified as &#x60;email&#x60;. (required).</param>
        /// <param name="replyTo">An email address to be used for the Reply-To header of an email..</param>
        /// <param name="template">An optional template name to use a template other than the default..</param>
        /// <param name="to">An array of email addresses to be used for the send to email address for delivery. A maximum of 5 addresses can be added. (required).</param>
        public EmailNotificationPath(string bcc = default(string), string cc = default(string), string channel = default(string), string replyTo = default(string), string template = default(string), string to = default(string))
        {
            // to ensure "channel" is required (not null)
            this.Channel = channel ?? throw new ArgumentNullException("channel is a required property for EmailNotificationPath and cannot be null");
            // to ensure "to" is required (not null)
            this.To = to ?? throw new ArgumentNullException("to is a required property for EmailNotificationPath and cannot be null");
            this.Bcc = bcc;
            this.Cc = cc;
            this.ReplyTo = replyTo;
            this.Template = template;
        }

        /// <summary>
        /// An array of email addresses to be used for blind carbon copy delivery. A maximum of 5 addresses can be added.
        /// </summary>
        /// <value>An array of email addresses to be used for blind carbon copy delivery. A maximum of 5 addresses can be added.</value>
        [DataMember(Name = "bcc", EmitDefaultValue = false)]
        public string Bcc { get; set; }

        /// <summary>
        /// An array of email addresses to be used for carbon copy delivery. A maximum of 5 addresses can be added.
        /// </summary>
        /// <value>An array of email addresses to be used for carbon copy delivery. A maximum of 5 addresses can be added.</value>
        [DataMember(Name = "cc", EmitDefaultValue = false)]
        public string Cc { get; set; }

        /// <summary>
        /// Should be specified as &#x60;email&#x60;.
        /// </summary>
        /// <value>Should be specified as &#x60;email&#x60;.</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// An email address to be used for the Reply-To header of an email.
        /// </summary>
        /// <value>An email address to be used for the Reply-To header of an email.</value>
        [DataMember(Name = "reply-to", EmitDefaultValue = false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// An optional template name to use a template other than the default.
        /// </summary>
        /// <value>An optional template name to use a template other than the default.</value>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public string Template { get; set; }

        /// <summary>
        /// An array of email addresses to be used for the send to email address for delivery. A maximum of 5 addresses can be added.
        /// </summary>
        /// <value>An array of email addresses to be used for the send to email address for delivery. A maximum of 5 addresses can be added.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailNotificationPath {\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailNotificationPath);
        }

        /// <summary>
        /// Returns true if EmailNotificationPath instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailNotificationPath to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailNotificationPath input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bcc == input.Bcc ||
                    (this.Bcc != null &&
                    this.Bcc.Equals(input.Bcc))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
