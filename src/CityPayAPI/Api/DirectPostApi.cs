/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CityPayAPI.Client;
using CityPayAPI.Model;

namespace CityPayAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectPostApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        AuthResponse DirectCResAuthRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0);

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> DirectCResAuthRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0);
        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenisationResponseModel</returns>
        TokenisationResponseModel DirectCResTokeniseRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0);

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenisationResponseModel</returns>
        ApiResponse<TokenisationResponseModel> DirectCResTokeniseRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0);
        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        AuthResponse DirectPostAuthRequest(DirectPostRequest directPostRequest, int operationIndex = 0);

        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> DirectPostAuthRequestWithHttpInfo(DirectPostRequest directPostRequest, int operationIndex = 0);
        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        AuthResponse DirectPostTokeniseRequest(DirectPostRequest directPostRequest, int operationIndex = 0);

        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> DirectPostTokeniseRequestWithHttpInfo(DirectPostRequest directPostRequest, int operationIndex = 0);
        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        AuthResponse TokenRequest(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0);

        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> TokenRequestWithHttpInfo(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectPostApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> DirectCResAuthRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> DirectCResAuthRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenisationResponseModel</returns>
        System.Threading.Tasks.Task<TokenisationResponseModel> DirectCResTokeniseRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenisationResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenisationResponseModel>> DirectCResTokeniseRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> DirectPostAuthRequestAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> DirectPostAuthRequestWithHttpInfoAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> DirectPostTokeniseRequestAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> DirectPostTokeniseRequestWithHttpInfoAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> TokenRequestAsync(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> TokenRequestWithHttpInfoAsync(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectPostApi : IDirectPostApiSync, IDirectPostApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DirectPostApi : IDirectPostApi
    {
        private CityPayAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectPostApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectPostApi(string basePath)
        {
            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                new CityPayAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DirectPostApi(CityPayAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DirectPostApi(CityPayAPI.Client.ISynchronousClient client, CityPayAPI.Client.IAsynchronousClient asyncClient, CityPayAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CityPayAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CityPayAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CityPayAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPayAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse DirectCResAuthRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0)
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = DirectCResAuthRequestWithHttpInfo(uuid, cres, threeDSSessionData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> DirectCResAuthRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostApi->DirectCResAuthRequest");
            }

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }

            localVarRequestOptions.Operation = "DirectPostApi.DirectCResAuthRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/cres/auth/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResAuthRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> DirectCResAuthRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await DirectCResAuthRequestWithHttpInfoAsync(uuid, cres, threeDSSessionData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> DirectCResAuthRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostApi->DirectCResAuthRequest");
            }


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }

            localVarRequestOptions.Operation = "DirectPostApi.DirectCResAuthRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/cres/auth/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResAuthRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenisationResponseModel</returns>
        public TokenisationResponseModel DirectCResTokeniseRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0)
        {
            CityPayAPI.Client.ApiResponse<TokenisationResponseModel> localVarResponse = DirectCResTokeniseRequestWithHttpInfo(uuid, cres, threeDSSessionData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenisationResponseModel</returns>
        public CityPayAPI.Client.ApiResponse<TokenisationResponseModel> DirectCResTokeniseRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostApi->DirectCResTokeniseRequest");
            }

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }

            localVarRequestOptions.Operation = "DirectPostApi.DirectCResTokeniseRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenisationResponseModel>("/direct/cres/tokenise/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResTokeniseRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenisationResponseModel</returns>
        public async System.Threading.Tasks.Task<TokenisationResponseModel> DirectCResTokeniseRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<TokenisationResponseModel> localVarResponse = await DirectCResTokeniseRequestWithHttpInfoAsync(uuid, cres, threeDSSessionData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenisationResponseModel)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<TokenisationResponseModel>> DirectCResTokeniseRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostApi->DirectCResTokeniseRequest");
            }


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }

            localVarRequestOptions.Operation = "DirectPostApi.DirectCResTokeniseRequest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenisationResponseModel>("/direct/cres/tokenise/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResTokeniseRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse DirectPostAuthRequest(DirectPostRequest directPostRequest, int operationIndex = 0)
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = DirectPostAuthRequestWithHttpInfo(directPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> DirectPostAuthRequestWithHttpInfo(DirectPostRequest directPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'directPostRequest' is set
            if (directPostRequest == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'directPostRequest' when calling DirectPostApi->DirectPostAuthRequest");
            }

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = directPostRequest;

            localVarRequestOptions.Operation = "DirectPostApi.DirectPostAuthRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/auth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostAuthRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> DirectPostAuthRequestAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await DirectPostAuthRequestWithHttpInfoAsync(directPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> DirectPostAuthRequestWithHttpInfoAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'directPostRequest' is set
            if (directPostRequest == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'directPostRequest' when calling DirectPostApi->DirectPostAuthRequest");
            }


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = directPostRequest;

            localVarRequestOptions.Operation = "DirectPostApi.DirectPostAuthRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostAuthRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse DirectPostTokeniseRequest(DirectPostRequest directPostRequest, int operationIndex = 0)
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = DirectPostTokeniseRequestWithHttpInfo(directPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> DirectPostTokeniseRequestWithHttpInfo(DirectPostRequest directPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'directPostRequest' is set
            if (directPostRequest == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'directPostRequest' when calling DirectPostApi->DirectPostTokeniseRequest");
            }

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = directPostRequest;

            localVarRequestOptions.Operation = "DirectPostApi.DirectPostTokeniseRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/tokenise", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostTokeniseRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> DirectPostTokeniseRequestAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await DirectPostTokeniseRequestWithHttpInfoAsync(directPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> DirectPostTokeniseRequestWithHttpInfoAsync(DirectPostRequest directPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'directPostRequest' is set
            if (directPostRequest == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'directPostRequest' when calling DirectPostApi->DirectPostTokeniseRequest");
            }


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = directPostRequest;

            localVarRequestOptions.Operation = "DirectPostApi.DirectPostTokeniseRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/tokenise", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostTokeniseRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse TokenRequest(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0)
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = TokenRequestWithHttpInfo(directTokenAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> TokenRequestWithHttpInfo(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0)
        {
            // verify the required parameter 'directTokenAuthRequest' is set
            if (directTokenAuthRequest == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'directTokenAuthRequest' when calling DirectPostApi->TokenRequest");
            }

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = directTokenAuthRequest;

            localVarRequestOptions.Operation = "DirectPostApi.TokenRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> TokenRequestAsync(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await TokenRequestWithHttpInfoAsync(directTokenAuthRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="directTokenAuthRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> TokenRequestWithHttpInfoAsync(DirectTokenAuthRequest directTokenAuthRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'directTokenAuthRequest' is set
            if (directTokenAuthRequest == null)
            {
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'directTokenAuthRequest' when calling DirectPostApi->TokenRequest");
            }


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = directTokenAuthRequest;

            localVarRequestOptions.Operation = "DirectPostApi.TokenRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
