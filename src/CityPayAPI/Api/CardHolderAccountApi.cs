/* 
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CityPayAPI.Client;
using CityPayAPI.Model;

namespace CityPayAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardHolderAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Card Deletion
        /// </summary>
        /// <remarks>
        /// Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>Acknowledgement</returns>
        Acknowledgement AccountCardDeleteRequest (string accountid, string cardId);

        /// <summary>
        /// Card Deletion
        /// </summary>
        /// <remarks>
        /// Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        ApiResponse<Acknowledgement> AccountCardDeleteRequestWithHttpInfo (string accountid, string cardId);
        /// <summary>
        /// Card Registration
        /// </summary>
        /// <remarks>
        /// Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>CardHolderAccount</returns>
        CardHolderAccount AccountCardRegisterRequest (string accountid, RegisterCard registerCard);

        /// <summary>
        /// Card Registration
        /// </summary>
        /// <remarks>
        /// Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        ApiResponse<CardHolderAccount> AccountCardRegisterRequestWithHttpInfo (string accountid, RegisterCard registerCard);
        /// <summary>
        /// Card Status
        /// </summary>
        /// <remarks>
        /// Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>Acknowledgement</returns>
        Acknowledgement AccountCardStatusRequest (string accountid, string cardId, CardStatus cardStatus);

        /// <summary>
        /// Card Status
        /// </summary>
        /// <remarks>
        /// Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        ApiResponse<Acknowledgement> AccountCardStatusRequestWithHttpInfo (string accountid, string cardId, CardStatus cardStatus);
        /// <summary>
        /// Contact Details Update
        /// </summary>
        /// <remarks>
        /// Allows for the ability to change the contact details for an account.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>CardHolderAccount</returns>
        CardHolderAccount AccountChangeContactRequest (string accountid, ContactDetails contactDetails);

        /// <summary>
        /// Contact Details Update
        /// </summary>
        /// <remarks>
        /// Allows for the ability to change the contact details for an account.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        ApiResponse<CardHolderAccount> AccountChangeContactRequestWithHttpInfo (string accountid, ContactDetails contactDetails);
        /// <summary>
        /// Account Create
        /// </summary>
        /// <remarks>
        /// Creates a new card holder account and initialises the account ready for adding cards.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>CardHolderAccount</returns>
        CardHolderAccount AccountCreate (AccountCreate accountCreate);

        /// <summary>
        /// Account Create
        /// </summary>
        /// <remarks>
        /// Creates a new card holder account and initialises the account ready for adding cards.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        ApiResponse<CardHolderAccount> AccountCreateWithHttpInfo (AccountCreate accountCreate);
        /// <summary>
        /// Account Deletion
        /// </summary>
        /// <remarks>
        /// Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Acknowledgement</returns>
        Acknowledgement AccountDeleteRequest (string accountid);

        /// <summary>
        /// Account Deletion
        /// </summary>
        /// <remarks>
        /// Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        ApiResponse<Acknowledgement> AccountDeleteRequestWithHttpInfo (string accountid);
        /// <summary>
        /// Account Retrieval
        /// </summary>
        /// <remarks>
        /// Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>CardHolderAccount</returns>
        CardHolderAccount AccountRetrieveRequest (string accountid);

        /// <summary>
        /// Account Retrieval
        /// </summary>
        /// <remarks>
        /// Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        ApiResponse<CardHolderAccount> AccountRetrieveRequestWithHttpInfo (string accountid);
        /// <summary>
        /// Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>Acknowledgement</returns>
        Acknowledgement AccountStatusRequest (string accountid, AccountStatus accountStatus);

        /// <summary>
        /// Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        ApiResponse<Acknowledgement> AccountStatusRequestWithHttpInfo (string accountid, AccountStatus accountStatus);
        /// <summary>
        /// Charge
        /// </summary>
        /// <remarks>
        /// A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>Decision</returns>
        Decision ChargeRequest (ChargeRequest chargeRequest);

        /// <summary>
        /// Charge
        /// </summary>
        /// <remarks>
        /// A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>ApiResponse of Decision</returns>
        ApiResponse<Decision> ChargeRequestWithHttpInfo (ChargeRequest chargeRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardHolderAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Card Deletion
        /// </summary>
        /// <remarks>
        /// Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>Task of Acknowledgement</returns>
        System.Threading.Tasks.Task<Acknowledgement> AccountCardDeleteRequestAsync (string accountid, string cardId);

        /// <summary>
        /// Card Deletion
        /// </summary>
        /// <remarks>
        /// Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Acknowledgement>> AccountCardDeleteRequestAsyncWithHttpInfo (string accountid, string cardId);
        /// <summary>
        /// Card Registration
        /// </summary>
        /// <remarks>
        /// Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>Task of CardHolderAccount</returns>
        System.Threading.Tasks.Task<CardHolderAccount> AccountCardRegisterRequestAsync (string accountid, RegisterCard registerCard);

        /// <summary>
        /// Card Registration
        /// </summary>
        /// <remarks>
        /// Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardHolderAccount>> AccountCardRegisterRequestAsyncWithHttpInfo (string accountid, RegisterCard registerCard);
        /// <summary>
        /// Card Status
        /// </summary>
        /// <remarks>
        /// Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>Task of Acknowledgement</returns>
        System.Threading.Tasks.Task<Acknowledgement> AccountCardStatusRequestAsync (string accountid, string cardId, CardStatus cardStatus);

        /// <summary>
        /// Card Status
        /// </summary>
        /// <remarks>
        /// Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Acknowledgement>> AccountCardStatusRequestAsyncWithHttpInfo (string accountid, string cardId, CardStatus cardStatus);
        /// <summary>
        /// Contact Details Update
        /// </summary>
        /// <remarks>
        /// Allows for the ability to change the contact details for an account.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>Task of CardHolderAccount</returns>
        System.Threading.Tasks.Task<CardHolderAccount> AccountChangeContactRequestAsync (string accountid, ContactDetails contactDetails);

        /// <summary>
        /// Contact Details Update
        /// </summary>
        /// <remarks>
        /// Allows for the ability to change the contact details for an account.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardHolderAccount>> AccountChangeContactRequestAsyncWithHttpInfo (string accountid, ContactDetails contactDetails);
        /// <summary>
        /// Account Create
        /// </summary>
        /// <remarks>
        /// Creates a new card holder account and initialises the account ready for adding cards.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>Task of CardHolderAccount</returns>
        System.Threading.Tasks.Task<CardHolderAccount> AccountCreateAsync (AccountCreate accountCreate);

        /// <summary>
        /// Account Create
        /// </summary>
        /// <remarks>
        /// Creates a new card holder account and initialises the account ready for adding cards.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardHolderAccount>> AccountCreateAsyncWithHttpInfo (AccountCreate accountCreate);
        /// <summary>
        /// Account Deletion
        /// </summary>
        /// <remarks>
        /// Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of Acknowledgement</returns>
        System.Threading.Tasks.Task<Acknowledgement> AccountDeleteRequestAsync (string accountid);

        /// <summary>
        /// Account Deletion
        /// </summary>
        /// <remarks>
        /// Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Acknowledgement>> AccountDeleteRequestAsyncWithHttpInfo (string accountid);
        /// <summary>
        /// Account Retrieval
        /// </summary>
        /// <remarks>
        /// Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of CardHolderAccount</returns>
        System.Threading.Tasks.Task<CardHolderAccount> AccountRetrieveRequestAsync (string accountid);

        /// <summary>
        /// Account Retrieval
        /// </summary>
        /// <remarks>
        /// Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardHolderAccount>> AccountRetrieveRequestAsyncWithHttpInfo (string accountid);
        /// <summary>
        /// Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>Task of Acknowledgement</returns>
        System.Threading.Tasks.Task<Acknowledgement> AccountStatusRequestAsync (string accountid, AccountStatus accountStatus);

        /// <summary>
        /// Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Acknowledgement>> AccountStatusRequestAsyncWithHttpInfo (string accountid, AccountStatus accountStatus);
        /// <summary>
        /// Charge
        /// </summary>
        /// <remarks>
        /// A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>Task of Decision</returns>
        System.Threading.Tasks.Task<Decision> ChargeRequestAsync (ChargeRequest chargeRequest);

        /// <summary>
        /// Charge
        /// </summary>
        /// <remarks>
        /// A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>Task of ApiResponse (Decision)</returns>
        System.Threading.Tasks.Task<ApiResponse<Decision>> ChargeRequestAsyncWithHttpInfo (ChargeRequest chargeRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardHolderAccountApi : ICardHolderAccountApiSync, ICardHolderAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardHolderAccountApi : ICardHolderAccountApi
    {
        private CityPayAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardHolderAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardHolderAccountApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardHolderAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardHolderAccountApi(String basePath)
        {
            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                new CityPayAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardHolderAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardHolderAccountApi(CityPayAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardHolderAccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CardHolderAccountApi(CityPayAPI.Client.ISynchronousClient client,CityPayAPI.Client.IAsynchronousClient asyncClient, CityPayAPI.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CityPayAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CityPayAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CityPayAPI.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPayAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Card Deletion Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>Acknowledgement</returns>
        public Acknowledgement AccountCardDeleteRequest (string accountid, string cardId)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = AccountCardDeleteRequestWithHttpInfo(accountid, cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Card Deletion Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        public CityPayAPI.Client.ApiResponse< Acknowledgement > AccountCardDeleteRequestWithHttpInfo (string accountid, string cardId)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountCardDeleteRequest");

            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardHolderAccountApi->AccountCardDeleteRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", CityPayAPI.Client.ClientUtils.ParameterToString(cardId)); // path parameter

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Acknowledgement >("/account/{accountid}/card/{cardId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCardDeleteRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Card Deletion Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>Task of Acknowledgement</returns>
        public async System.Threading.Tasks.Task<Acknowledgement> AccountCardDeleteRequestAsync (string accountid, string cardId)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = await AccountCardDeleteRequestAsyncWithHttpInfo(accountid, cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Card Deletion Deletes a card from the account. The card will be marked for deletion before a subsequent purge will clear the card permanently. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Acknowledgement>> AccountCardDeleteRequestAsyncWithHttpInfo (string accountid, string cardId)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountCardDeleteRequest");

            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardHolderAccountApi->AccountCardDeleteRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", CityPayAPI.Client.ClientUtils.ParameterToString(cardId)); // path parameter

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Acknowledgement>("/account/{accountid}/card/{cardId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCardDeleteRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Card Registration Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>CardHolderAccount</returns>
        public CardHolderAccount AccountCardRegisterRequest (string accountid, RegisterCard registerCard)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = AccountCardRegisterRequestWithHttpInfo(accountid, registerCard);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Card Registration Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        public CityPayAPI.Client.ApiResponse< CardHolderAccount > AccountCardRegisterRequestWithHttpInfo (string accountid, RegisterCard registerCard)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountCardRegisterRequest");

            // verify the required parameter 'registerCard' is set
            if (registerCard == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'registerCard' when calling CardHolderAccountApi->AccountCardRegisterRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = registerCard;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CardHolderAccount >("/account/{accountid}/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCardRegisterRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Card Registration Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>Task of CardHolderAccount</returns>
        public async System.Threading.Tasks.Task<CardHolderAccount> AccountCardRegisterRequestAsync (string accountid, RegisterCard registerCard)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = await AccountCardRegisterRequestAsyncWithHttpInfo(accountid, registerCard);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Card Registration Allows for a card to be registered for the account. The card will be added for future  processing and will be available as a tokenised value for future processing.  The card will be validated for  0. Being a valid card number (luhn check) 0. Having a valid expiry date 0. Being a valid bin value. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="registerCard"></param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<CardHolderAccount>> AccountCardRegisterRequestAsyncWithHttpInfo (string accountid, RegisterCard registerCard)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountCardRegisterRequest");

            // verify the required parameter 'registerCard' is set
            if (registerCard == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'registerCard' when calling CardHolderAccountApi->AccountCardRegisterRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = registerCard;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CardHolderAccount>("/account/{accountid}/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCardRegisterRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Card Status Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>Acknowledgement</returns>
        public Acknowledgement AccountCardStatusRequest (string accountid, string cardId, CardStatus cardStatus)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = AccountCardStatusRequestWithHttpInfo(accountid, cardId, cardStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Card Status Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        public CityPayAPI.Client.ApiResponse< Acknowledgement > AccountCardStatusRequestWithHttpInfo (string accountid, string cardId, CardStatus cardStatus)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountCardStatusRequest");

            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardHolderAccountApi->AccountCardStatusRequest");

            // verify the required parameter 'cardStatus' is set
            if (cardStatus == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardStatus' when calling CardHolderAccountApi->AccountCardStatusRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", CityPayAPI.Client.ClientUtils.ParameterToString(cardId)); // path parameter
            localVarRequestOptions.Data = cardStatus;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Acknowledgement >("/account/{accountid}/card/{cardId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCardStatusRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Card Status Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>Task of Acknowledgement</returns>
        public async System.Threading.Tasks.Task<Acknowledgement> AccountCardStatusRequestAsync (string accountid, string cardId, CardStatus cardStatus)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = await AccountCardStatusRequestAsyncWithHttpInfo(accountid, cardId, cardStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Card Status Updates the status of a card for processing. The following values are available  | Status | Description |  |- -- -- -- -|- -- -- -- -- -- --| | Active | The card is active for processing and can be used for charging against with a valid token | | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge | | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="cardId">The id of the card that is presented by a call to retrieve a card holder account.</param>
        /// <param name="cardStatus"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Acknowledgement>> AccountCardStatusRequestAsyncWithHttpInfo (string accountid, string cardId, CardStatus cardStatus)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountCardStatusRequest");

            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardHolderAccountApi->AccountCardStatusRequest");

            // verify the required parameter 'cardStatus' is set
            if (cardStatus == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardStatus' when calling CardHolderAccountApi->AccountCardStatusRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", CityPayAPI.Client.ClientUtils.ParameterToString(cardId)); // path parameter
            localVarRequestOptions.Data = cardStatus;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Acknowledgement>("/account/{accountid}/card/{cardId}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCardStatusRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contact Details Update Allows for the ability to change the contact details for an account.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>CardHolderAccount</returns>
        public CardHolderAccount AccountChangeContactRequest (string accountid, ContactDetails contactDetails)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = AccountChangeContactRequestWithHttpInfo(accountid, contactDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Contact Details Update Allows for the ability to change the contact details for an account.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        public CityPayAPI.Client.ApiResponse< CardHolderAccount > AccountChangeContactRequestWithHttpInfo (string accountid, ContactDetails contactDetails)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountChangeContactRequest");

            // verify the required parameter 'contactDetails' is set
            if (contactDetails == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'contactDetails' when calling CardHolderAccountApi->AccountChangeContactRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = contactDetails;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CardHolderAccount >("/account/{accountid}/contact", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountChangeContactRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contact Details Update Allows for the ability to change the contact details for an account.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>Task of CardHolderAccount</returns>
        public async System.Threading.Tasks.Task<CardHolderAccount> AccountChangeContactRequestAsync (string accountid, ContactDetails contactDetails)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = await AccountChangeContactRequestAsyncWithHttpInfo(accountid, contactDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Contact Details Update Allows for the ability to change the contact details for an account.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="contactDetails"></param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<CardHolderAccount>> AccountChangeContactRequestAsyncWithHttpInfo (string accountid, ContactDetails contactDetails)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountChangeContactRequest");

            // verify the required parameter 'contactDetails' is set
            if (contactDetails == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'contactDetails' when calling CardHolderAccountApi->AccountChangeContactRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = contactDetails;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CardHolderAccount>("/account/{accountid}/contact", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountChangeContactRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Create Creates a new card holder account and initialises the account ready for adding cards.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>CardHolderAccount</returns>
        public CardHolderAccount AccountCreate (AccountCreate accountCreate)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = AccountCreateWithHttpInfo(accountCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Create Creates a new card holder account and initialises the account ready for adding cards.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        public CityPayAPI.Client.ApiResponse< CardHolderAccount > AccountCreateWithHttpInfo (AccountCreate accountCreate)
        {
            // verify the required parameter 'accountCreate' is set
            if (accountCreate == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountCreate' when calling CardHolderAccountApi->AccountCreate");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = accountCreate;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CardHolderAccount >("/account/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Create Creates a new card holder account and initialises the account ready for adding cards.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>Task of CardHolderAccount</returns>
        public async System.Threading.Tasks.Task<CardHolderAccount> AccountCreateAsync (AccountCreate accountCreate)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = await AccountCreateAsyncWithHttpInfo(accountCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Create Creates a new card holder account and initialises the account ready for adding cards.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCreate"></param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<CardHolderAccount>> AccountCreateAsyncWithHttpInfo (AccountCreate accountCreate)
        {
            // verify the required parameter 'accountCreate' is set
            if (accountCreate == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountCreate' when calling CardHolderAccountApi->AccountCreate");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = accountCreate;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CardHolderAccount>("/account/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Deletion Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Acknowledgement</returns>
        public Acknowledgement AccountDeleteRequest (string accountid)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = AccountDeleteRequestWithHttpInfo(accountid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Deletion Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        public CityPayAPI.Client.ApiResponse< Acknowledgement > AccountDeleteRequestWithHttpInfo (string accountid)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountDeleteRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Acknowledgement >("/account/{accountid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountDeleteRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Deletion Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of Acknowledgement</returns>
        public async System.Threading.Tasks.Task<Acknowledgement> AccountDeleteRequestAsync (string accountid)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = await AccountDeleteRequestAsyncWithHttpInfo(accountid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Deletion Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further transactions will be alowed to be processed or actioned against this account. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Acknowledgement>> AccountDeleteRequestAsyncWithHttpInfo (string accountid)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountDeleteRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Acknowledgement>("/account/{accountid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountDeleteRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Retrieval Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>CardHolderAccount</returns>
        public CardHolderAccount AccountRetrieveRequest (string accountid)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = AccountRetrieveRequestWithHttpInfo(accountid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Retrieval Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>ApiResponse of CardHolderAccount</returns>
        public CityPayAPI.Client.ApiResponse< CardHolderAccount > AccountRetrieveRequestWithHttpInfo (string accountid)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountRetrieveRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CardHolderAccount >("/account/{accountid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountRetrieveRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Retrieval Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of CardHolderAccount</returns>
        public async System.Threading.Tasks.Task<CardHolderAccount> AccountRetrieveRequestAsync (string accountid)
        {
             CityPayAPI.Client.ApiResponse<CardHolderAccount> localVarResponse = await AccountRetrieveRequestAsyncWithHttpInfo(accountid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Retrieval Allows for the retrieval of a card holder account for the given &#x60;id&#x60;. Should duplicate accounts exist for the same &#x60;id&#x60;, the first account created with that &#x60;id&#x60; will be returned.  The account can be used for tokenisation processing by listing all cards assigned to the account. The returned cards will include all &#x60;active&#x60;, &#x60;inactive&#x60; and &#x60;expired&#x60; cards. This can be used to  enable a card holder to view their wallet and make constructive choices on which card to use. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <returns>Task of ApiResponse (CardHolderAccount)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<CardHolderAccount>> AccountRetrieveRequestAsyncWithHttpInfo (string accountid)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountRetrieveRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CardHolderAccount>("/account/{accountid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountRetrieveRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Status Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>Acknowledgement</returns>
        public Acknowledgement AccountStatusRequest (string accountid, AccountStatus accountStatus)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = AccountStatusRequestWithHttpInfo(accountid, accountStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account Status Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        public CityPayAPI.Client.ApiResponse< Acknowledgement > AccountStatusRequestWithHttpInfo (string accountid, AccountStatus accountStatus)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountStatusRequest");

            // verify the required parameter 'accountStatus' is set
            if (accountStatus == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountStatus' when calling CardHolderAccountApi->AccountStatusRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = accountStatus;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Acknowledgement >("/account/{accountid}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountStatusRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Account Status Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>Task of Acknowledgement</returns>
        public async System.Threading.Tasks.Task<Acknowledgement> AccountStatusRequestAsync (string accountid, AccountStatus accountStatus)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = await AccountStatusRequestAsyncWithHttpInfo(accountid, accountStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account Status Updates the status of an account. An account can have the following statuses applied  | Status | Description | |- -- -- -- -|- -- -- -- -- -- --| | Active | The account is active for processing | | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing | 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountid">The account id that refers to the customer&#39;s account no. This value will have been provided when setting up the card holder account.</param>
        /// <param name="accountStatus"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Acknowledgement>> AccountStatusRequestAsyncWithHttpInfo (string accountid, AccountStatus accountStatus)
        {
            // verify the required parameter 'accountid' is set
            if (accountid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountid' when calling CardHolderAccountApi->AccountStatusRequest");

            // verify the required parameter 'accountStatus' is set
            if (accountStatus == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'accountStatus' when calling CardHolderAccountApi->AccountStatusRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("accountid", CityPayAPI.Client.ClientUtils.ParameterToString(accountid)); // path parameter
            localVarRequestOptions.Data = accountStatus;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Acknowledgement>("/account/{accountid}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountStatusRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charge A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>Decision</returns>
        public Decision ChargeRequest (ChargeRequest chargeRequest)
        {
             CityPayAPI.Client.ApiResponse<Decision> localVarResponse = ChargeRequestWithHttpInfo(chargeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Charge A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>ApiResponse of Decision</returns>
        public CityPayAPI.Client.ApiResponse< Decision > ChargeRequestWithHttpInfo (ChargeRequest chargeRequest)
        {
            // verify the required parameter 'chargeRequest' is set
            if (chargeRequest == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'chargeRequest' when calling CardHolderAccountApi->ChargeRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = chargeRequest;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Decision >("/charge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargeRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charge A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>Task of Decision</returns>
        public async System.Threading.Tasks.Task<Decision> ChargeRequestAsync (ChargeRequest chargeRequest)
        {
             CityPayAPI.Client.ApiResponse<Decision> localVarResponse = await ChargeRequestAsyncWithHttpInfo(chargeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Charge A charge process obtains an authorisation using a tokenised value which represents a stored card  on a card holder account.  A card must previously be registered by calling &#x60;/account-register-card&#x60; with the card details  or retrieved using &#x60;/account-retrieve&#x60;  Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a  relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from  replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details for use elsewhere.    If a token is reused after it has expired it will be rejected and a new token will be required.   Tokenisation can be used for   - repeat authorisations on a previously stored card - easy authorisations just requiring CSC values to be entered - can be used for credential on file style payments - can require full 3-D Secure authentication to retain the liability shift - wallet style usage. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargeRequest"></param>
        /// <returns>Task of ApiResponse (Decision)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Decision>> ChargeRequestAsyncWithHttpInfo (ChargeRequest chargeRequest)
        {
            // verify the required parameter 'chargeRequest' is set
            if (chargeRequest == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'chargeRequest' when calling CardHolderAccountApi->ChargeRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = chargeRequest;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Decision>("/charge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargeRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
