/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// EventDataModel
    /// </summary>
    [DataContract(Name = "EventDataModel")]
    public partial class EventDataModel : IEquatable<EventDataModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDataModel" /> class.
        /// </summary>
        /// <param name="eventEndDate">The date when the event ends in ISO format (yyyy-MM-dd)..</param>
        /// <param name="eventId">An id of the event..</param>
        /// <param name="eventOrganiserId">An id of the event organiser..</param>
        /// <param name="eventStartDate">The date when the event starts in ISO format (yyyy-MM-dd)..</param>
        /// <param name="paymentType">The type of payment such as &#x60;deposit&#x60; or &#x60;balance&#x60;..</param>
        public EventDataModel(DateTime eventEndDate = default(DateTime), string eventId = default(string), string eventOrganiserId = default(string), DateTime eventStartDate = default(DateTime), string paymentType = default(string))
        {
            this.EventEndDate = eventEndDate;
            this.EventId = eventId;
            this.EventOrganiserId = eventOrganiserId;
            this.EventStartDate = eventStartDate;
            this.PaymentType = paymentType;
        }

        /// <summary>
        /// The date when the event ends in ISO format (yyyy-MM-dd).
        /// </summary>
        /// <value>The date when the event ends in ISO format (yyyy-MM-dd).</value>
        [DataMember(Name = "event_end_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EventEndDate { get; set; }

        /// <summary>
        /// An id of the event.
        /// </summary>
        /// <value>An id of the event.</value>
        [DataMember(Name = "event_id", EmitDefaultValue = false)]
        public string EventId { get; set; }

        /// <summary>
        /// An id of the event organiser.
        /// </summary>
        /// <value>An id of the event organiser.</value>
        [DataMember(Name = "event_organiser_id", EmitDefaultValue = false)]
        public string EventOrganiserId { get; set; }

        /// <summary>
        /// The date when the event starts in ISO format (yyyy-MM-dd).
        /// </summary>
        /// <value>The date when the event starts in ISO format (yyyy-MM-dd).</value>
        [DataMember(Name = "event_start_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EventStartDate { get; set; }

        /// <summary>
        /// The type of payment such as &#x60;deposit&#x60; or &#x60;balance&#x60;.
        /// </summary>
        /// <value>The type of payment such as &#x60;deposit&#x60; or &#x60;balance&#x60;.</value>
        [DataMember(Name = "payment_type", EmitDefaultValue = false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventDataModel {\n");
            sb.Append("  EventEndDate: ").Append(EventEndDate).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventOrganiserId: ").Append(EventOrganiserId).Append("\n");
            sb.Append("  EventStartDate: ").Append(EventStartDate).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventDataModel);
        }

        /// <summary>
        /// Returns true if EventDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EventDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDataModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventEndDate == input.EventEndDate ||
                    (this.EventEndDate != null &&
                    this.EventEndDate.Equals(input.EventEndDate))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.EventOrganiserId == input.EventOrganiserId ||
                    (this.EventOrganiserId != null &&
                    this.EventOrganiserId.Equals(input.EventOrganiserId))
                ) && 
                (
                    this.EventStartDate == input.EventStartDate ||
                    (this.EventStartDate != null &&
                    this.EventStartDate.Equals(input.EventStartDate))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventEndDate.GetHashCode();
                }
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                if (this.EventOrganiserId != null)
                {
                    hashCode = (hashCode * 59) + this.EventOrganiserId.GetHashCode();
                }
                if (this.EventStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventStartDate.GetHashCode();
                }
                if (this.PaymentType != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
