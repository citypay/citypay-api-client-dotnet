/* 
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * The version of the OpenAPI document: 6.0.0.BETA
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// RegisterCard
    /// </summary>
    [DataContract]
    public partial class RegisterCard :  IEquatable<RegisterCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterCard" /> class.
        /// </summary>
        /// <param name="accountId">The account to register the card against..</param>
        /// <param name="cardnumber">The primary number of the card..</param>
        /// <param name="defaultCard">Determines whether the card should be the new default card..</param>
        /// <param name="expmonth">The expiry month of the card..</param>
        /// <param name="expyear">The expiry year of the card..</param>
        public RegisterCard(string accountId = default(string), string cardnumber = default(string), bool defaultCard = default(bool), int expmonth = default(int), int expyear = default(int))
        {
            this.AccountId = accountId;
            this.Cardnumber = cardnumber;
            this.DefaultCard = defaultCard;
            this.Expmonth = expmonth;
            this.Expyear = expyear;
        }
        
        /// <summary>
        /// The account to register the card against.
        /// </summary>
        /// <value>The account to register the card against.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The primary number of the card.
        /// </summary>
        /// <value>The primary number of the card.</value>
        [DataMember(Name="cardnumber", EmitDefaultValue=false)]
        public string Cardnumber { get; set; }

        /// <summary>
        /// Determines whether the card should be the new default card.
        /// </summary>
        /// <value>Determines whether the card should be the new default card.</value>
        [DataMember(Name="defaultCard", EmitDefaultValue=false)]
        public bool DefaultCard { get; set; }

        /// <summary>
        /// The expiry month of the card.
        /// </summary>
        /// <value>The expiry month of the card.</value>
        [DataMember(Name="expmonth", EmitDefaultValue=false)]
        public int Expmonth { get; set; }

        /// <summary>
        /// The expiry year of the card.
        /// </summary>
        /// <value>The expiry year of the card.</value>
        [DataMember(Name="expyear", EmitDefaultValue=false)]
        public int Expyear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterCard {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Cardnumber: ").Append(Cardnumber).Append("\n");
            sb.Append("  DefaultCard: ").Append(DefaultCard).Append("\n");
            sb.Append("  Expmonth: ").Append(Expmonth).Append("\n");
            sb.Append("  Expyear: ").Append(Expyear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterCard);
        }

        /// <summary>
        /// Returns true if RegisterCard instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Cardnumber == input.Cardnumber ||
                    (this.Cardnumber != null &&
                    this.Cardnumber.Equals(input.Cardnumber))
                ) && 
                (
                    this.DefaultCard == input.DefaultCard ||
                    this.DefaultCard.Equals(input.DefaultCard)
                ) && 
                (
                    this.Expmonth == input.Expmonth ||
                    this.Expmonth.Equals(input.Expmonth)
                ) && 
                (
                    this.Expyear == input.Expyear ||
                    this.Expyear.Equals(input.Expyear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Cardnumber != null)
                    hashCode = hashCode * 59 + this.Cardnumber.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultCard.GetHashCode();
                hashCode = hashCode * 59 + this.Expmonth.GetHashCode();
                hashCode = hashCode * 59 + this.Expyear.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountId (string) maxLength
            if(this.AccountId != null && this.AccountId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 50.", new [] { "AccountId" });
            }

            // AccountId (string) minLength
            if(this.AccountId != null && this.AccountId.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 5.", new [] { "AccountId" });
            }

            // Cardnumber (string) maxLength
            if(this.Cardnumber != null && this.Cardnumber.Length > 22)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cardnumber, length must be less than 22.", new [] { "Cardnumber" });
            }

            // Cardnumber (string) minLength
            if(this.Cardnumber != null && this.Cardnumber.Length < 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cardnumber, length must be greater than 12.", new [] { "Cardnumber" });
            }

            // Expmonth (int) maximum
            if(this.Expmonth > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value less than or equal to 12.", new [] { "Expmonth" });
            }

            // Expmonth (int) minimum
            if(this.Expmonth < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value greater than or equal to 1.", new [] { "Expmonth" });
            }

            // Expyear (int) maximum
            if(this.Expyear > (int)2100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value less than or equal to 2100.", new [] { "Expyear" });
            }

            // Expyear (int) minimum
            if(this.Expyear < (int)2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value greater than or equal to 2000.", new [] { "Expyear" });
            }

            yield break;
        }
    }

}
