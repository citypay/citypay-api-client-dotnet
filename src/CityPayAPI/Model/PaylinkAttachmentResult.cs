/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkAttachmentResult
    /// </summary>
    [DataContract(Name = "PaylinkAttachmentResult")]
    public partial class PaylinkAttachmentResult : IEquatable<PaylinkAttachmentResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkAttachmentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaylinkAttachmentResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkAttachmentResult" /> class.
        /// </summary>
        /// <param name="name">The name of the attachment. (required).</param>
        /// <param name="result">The result of an uploaded attachment such as &#x60;OK&#x60; or &#x60;UPLOAD&#x60;. (required).</param>
        /// <param name="url">If the attachment is to be uploaded, a URL that can be used for Multipart upload of the attachment..</param>
        public PaylinkAttachmentResult(string name = default(string), string result = default(string), string url = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PaylinkAttachmentResult and cannot be null");
            }
            this.Name = name;
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new ArgumentNullException("result is a required property for PaylinkAttachmentResult and cannot be null");
            }
            this.Result = result;
            this.Url = url;
        }

        /// <summary>
        /// The name of the attachment.
        /// </summary>
        /// <value>The name of the attachment.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The result of an uploaded attachment such as &#x60;OK&#x60; or &#x60;UPLOAD&#x60;.
        /// </summary>
        /// <value>The result of an uploaded attachment such as &#x60;OK&#x60; or &#x60;UPLOAD&#x60;.</value>
        [DataMember(Name = "result", IsRequired = true, EmitDefaultValue = false)]
        public string Result { get; set; }

        /// <summary>
        /// If the attachment is to be uploaded, a URL that can be used for Multipart upload of the attachment.
        /// </summary>
        /// <value>If the attachment is to be uploaded, a URL that can be used for Multipart upload of the attachment.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkAttachmentResult {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaylinkAttachmentResult);
        }

        /// <summary>
        /// Returns true if PaylinkAttachmentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PaylinkAttachmentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaylinkAttachmentResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Result != null)
                {
                    hashCode = (hashCode * 59) + this.Result.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
