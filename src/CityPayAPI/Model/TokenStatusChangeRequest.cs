/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// TokenStatusChangeRequest
    /// </summary>
    [DataContract(Name = "TokenStatusChangeRequest")]
    public partial class TokenStatusChangeRequest : IEquatable<TokenStatusChangeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenStatusChangeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenStatusChangeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenStatusChangeRequest" /> class.
        /// </summary>
        /// <param name="after">identifies the date and time to lookup changes after. (required).</param>
        /// <param name="maxResults">The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 50 and the maximum allowed page size is 100. A value of 0 uses the default..</param>
        /// <param name="merchantid">the merchant id to review tokens for. (required).</param>
        /// <param name="nextToken">If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged..</param>
        public TokenStatusChangeRequest(DateTime after = default(DateTime), int maxResults = default(int), int merchantid = default(int), string nextToken = default(string))
        {
            this.After = after;
            this.Merchantid = merchantid;
            this.MaxResults = maxResults;
            this.NextToken = nextToken;
        }

        /// <summary>
        /// identifies the date and time to lookup changes after.
        /// </summary>
        /// <value>identifies the date and time to lookup changes after.</value>
        [DataMember(Name = "after", IsRequired = true, EmitDefaultValue = false)]
        public DateTime After { get; set; }

        /// <summary>
        /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 50 and the maximum allowed page size is 100. A value of 0 uses the default.
        /// </summary>
        /// <value>The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 50 and the maximum allowed page size is 100. A value of 0 uses the default.</value>
        [DataMember(Name = "maxResults", EmitDefaultValue = false)]
        public int MaxResults { get; set; }

        /// <summary>
        /// the merchant id to review tokens for.
        /// </summary>
        /// <value>the merchant id to review tokens for.</value>
        [DataMember(Name = "merchantid", IsRequired = true, EmitDefaultValue = false)]
        public int Merchantid { get; set; }

        /// <summary>
        /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.
        /// </summary>
        /// <value>If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.</value>
        [DataMember(Name = "nextToken", EmitDefaultValue = false)]
        public string NextToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenStatusChangeRequest {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  Merchantid: ").Append(Merchantid).Append("\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenStatusChangeRequest);
        }

        /// <summary>
        /// Returns true if TokenStatusChangeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenStatusChangeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenStatusChangeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.After == input.After ||
                    (this.After != null &&
                    this.After.Equals(input.After))
                ) && 
                (
                    this.MaxResults == input.MaxResults ||
                    this.MaxResults.Equals(input.MaxResults)
                ) && 
                (
                    this.Merchantid == input.Merchantid ||
                    this.Merchantid.Equals(input.Merchantid)
                ) && 
                (
                    this.NextToken == input.NextToken ||
                    (this.NextToken != null &&
                    this.NextToken.Equals(input.NextToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.After != null)
                    hashCode = hashCode * 59 + this.After.GetHashCode();
                hashCode = hashCode * 59 + this.MaxResults.GetHashCode();
                hashCode = hashCode * 59 + this.Merchantid.GetHashCode();
                if (this.NextToken != null)
                    hashCode = hashCode * 59 + this.NextToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxResults (int) maximum
            if(this.MaxResults > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxResults, must be a value less than or equal to 100.", new [] { "MaxResults" });
            }

            yield break;
        }
    }

}
