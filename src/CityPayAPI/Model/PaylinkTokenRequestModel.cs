/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkTokenRequestModel
    /// </summary>
    [DataContract(Name = "PaylinkTokenRequestModel")]
    public partial class PaylinkTokenRequestModel : IEquatable<PaylinkTokenRequestModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkTokenRequestModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaylinkTokenRequestModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkTokenRequestModel" /> class.
        /// </summary>
        /// <param name="accountno">Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length..</param>
        /// <param name="amount">Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of £74.95 would be presented as 7495. (required).</param>
        /// <param name="cardholder">cardholder.</param>
        /// <param name="cart">cart.</param>
        /// <param name="clientVersion">The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin..</param>
        /// <param name="config">config.</param>
        /// <param name="email">The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. .</param>
        /// <param name="identifier">Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication.  (required).</param>
        /// <param name="merchantid">The merchant id you wish to process this transaction with. (required).</param>
        /// <param name="subscriptionId">an id associated with a subscription to link the token request against..</param>
        /// <param name="txType">A value to override the transaction type if requested by your account manager..</param>
        public PaylinkTokenRequestModel(string accountno = default(string), int amount = default(int), PaylinkCardHolder cardholder = default(PaylinkCardHolder), PaylinkCart cart = default(PaylinkCart), string clientVersion = default(string), PaylinkConfig config = default(PaylinkConfig), string email = default(string), string identifier = default(string), int merchantid = default(int), string subscriptionId = default(string), string txType = default(string))
        {
            this.Amount = amount;
            // to ensure "identifier" is required (not null)
            this.Identifier = identifier ?? throw new ArgumentNullException("identifier is a required property for PaylinkTokenRequestModel and cannot be null");
            this.Merchantid = merchantid;
            this.Accountno = accountno;
            this.Cardholder = cardholder;
            this.Cart = cart;
            this.ClientVersion = clientVersion;
            this.Config = config;
            this.Email = email;
            this.SubscriptionId = subscriptionId;
            this.TxType = txType;
        }

        /// <summary>
        /// Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length.
        /// </summary>
        /// <value>Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length.</value>
        [DataMember(Name = "accountno", EmitDefaultValue = false)]
        public string Accountno { get; set; }

        /// <summary>
        /// Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of £74.95 would be presented as 7495.
        /// </summary>
        /// <value>Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of £74.95 would be presented as 7495.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets Cardholder
        /// </summary>
        [DataMember(Name = "cardholder", EmitDefaultValue = false)]
        public PaylinkCardHolder Cardholder { get; set; }

        /// <summary>
        /// Gets or Sets Cart
        /// </summary>
        [DataMember(Name = "cart", EmitDefaultValue = false)]
        public PaylinkCart Cart { get; set; }

        /// <summary>
        /// The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.
        /// </summary>
        /// <value>The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.</value>
        [DataMember(Name = "client_version", EmitDefaultValue = false)]
        public string ClientVersion { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public PaylinkConfig Config { get; set; }

        /// <summary>
        /// The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. 
        /// </summary>
        /// <value>The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. </value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. 
        /// </summary>
        /// <value>Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. </value>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// The merchant id you wish to process this transaction with.
        /// </summary>
        /// <value>The merchant id you wish to process this transaction with.</value>
        [DataMember(Name = "merchantid", IsRequired = true, EmitDefaultValue = false)]
        public int Merchantid { get; set; }

        /// <summary>
        /// an id associated with a subscription to link the token request against.
        /// </summary>
        /// <value>an id associated with a subscription to link the token request against.</value>
        [DataMember(Name = "subscription_id", EmitDefaultValue = false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// A value to override the transaction type if requested by your account manager.
        /// </summary>
        /// <value>A value to override the transaction type if requested by your account manager.</value>
        [DataMember(Name = "tx_type", EmitDefaultValue = false)]
        public string TxType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaylinkTokenRequestModel {\n");
            sb.Append("  Accountno: ").Append(Accountno).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Cardholder: ").Append(Cardholder).Append("\n");
            sb.Append("  Cart: ").Append(Cart).Append("\n");
            sb.Append("  ClientVersion: ").Append(ClientVersion).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Merchantid: ").Append(Merchantid).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  TxType: ").Append(TxType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaylinkTokenRequestModel);
        }

        /// <summary>
        /// Returns true if PaylinkTokenRequestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaylinkTokenRequestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaylinkTokenRequestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accountno == input.Accountno ||
                    (this.Accountno != null &&
                    this.Accountno.Equals(input.Accountno))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Cardholder == input.Cardholder ||
                    (this.Cardholder != null &&
                    this.Cardholder.Equals(input.Cardholder))
                ) && 
                (
                    this.Cart == input.Cart ||
                    (this.Cart != null &&
                    this.Cart.Equals(input.Cart))
                ) && 
                (
                    this.ClientVersion == input.ClientVersion ||
                    (this.ClientVersion != null &&
                    this.ClientVersion.Equals(input.ClientVersion))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Merchantid == input.Merchantid ||
                    this.Merchantid.Equals(input.Merchantid)
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.TxType == input.TxType ||
                    (this.TxType != null &&
                    this.TxType.Equals(input.TxType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accountno != null)
                    hashCode = hashCode * 59 + this.Accountno.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Cardholder != null)
                    hashCode = hashCode * 59 + this.Cardholder.GetHashCode();
                if (this.Cart != null)
                    hashCode = hashCode * 59 + this.Cart.GetHashCode();
                if (this.ClientVersion != null)
                    hashCode = hashCode * 59 + this.ClientVersion.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                hashCode = hashCode * 59 + this.Merchantid.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.TxType != null)
                    hashCode = hashCode * 59 + this.TxType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 254)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 254.", new [] { "Email" });
            }

            // Identifier (string) maxLength
            if(this.Identifier != null && this.Identifier.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be less than 50.", new [] { "Identifier" });
            }

            // Identifier (string) minLength
            if(this.Identifier != null && this.Identifier.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be greater than 4.", new [] { "Identifier" });
            }

            yield break;
        }
    }

}
