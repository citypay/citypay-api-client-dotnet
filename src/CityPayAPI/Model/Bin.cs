/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// Bin
    /// </summary>
    [DataContract(Name = "Bin")]
    public partial class Bin : IEquatable<Bin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bin" /> class.
        /// </summary>
        /// <param name="binCommercial">Defines whether the card is a commercial card..</param>
        /// <param name="binCorporate">Defines whether the card is a corporate business card..</param>
        /// <param name="binCountryIssued">The determined country where the card was issued..</param>
        /// <param name="binCredit">Defines whether the card is a credit card..</param>
        /// <param name="binCurrency">The default currency determined for the card..</param>
        /// <param name="binDebit">Defines whether the card is a debit card..</param>
        /// <param name="binDescription">A description of the bin on the card to identify what type of product the card is..</param>
        /// <param name="binEu">Defines whether the card is regulated within the EU..</param>
        /// <param name="scheme">The scheme that issued the card..</param>
        public Bin(bool binCommercial = default(bool), bool binCorporate = default(bool), string binCountryIssued = default(string), bool binCredit = default(bool), string binCurrency = default(string), bool binDebit = default(bool), string binDescription = default(string), bool binEu = default(bool), string scheme = default(string))
        {
            this.BinCommercial = binCommercial;
            this.BinCorporate = binCorporate;
            this.BinCountryIssued = binCountryIssued;
            this.BinCredit = binCredit;
            this.BinCurrency = binCurrency;
            this.BinDebit = binDebit;
            this.BinDescription = binDescription;
            this.BinEu = binEu;
            this.Scheme = scheme;
        }

        /// <summary>
        /// Defines whether the card is a commercial card.
        /// </summary>
        /// <value>Defines whether the card is a commercial card.</value>
        [DataMember(Name = "bin_commercial", EmitDefaultValue = true)]
        public bool BinCommercial { get; set; }

        /// <summary>
        /// Defines whether the card is a corporate business card.
        /// </summary>
        /// <value>Defines whether the card is a corporate business card.</value>
        [DataMember(Name = "bin_corporate", EmitDefaultValue = true)]
        public bool BinCorporate { get; set; }

        /// <summary>
        /// The determined country where the card was issued.
        /// </summary>
        /// <value>The determined country where the card was issued.</value>
        [DataMember(Name = "bin_country_issued", EmitDefaultValue = false)]
        public string BinCountryIssued { get; set; }

        /// <summary>
        /// Defines whether the card is a credit card.
        /// </summary>
        /// <value>Defines whether the card is a credit card.</value>
        [DataMember(Name = "bin_credit", EmitDefaultValue = true)]
        public bool BinCredit { get; set; }

        /// <summary>
        /// The default currency determined for the card.
        /// </summary>
        /// <value>The default currency determined for the card.</value>
        [DataMember(Name = "bin_currency", EmitDefaultValue = false)]
        public string BinCurrency { get; set; }

        /// <summary>
        /// Defines whether the card is a debit card.
        /// </summary>
        /// <value>Defines whether the card is a debit card.</value>
        [DataMember(Name = "bin_debit", EmitDefaultValue = true)]
        public bool BinDebit { get; set; }

        /// <summary>
        /// A description of the bin on the card to identify what type of product the card is.
        /// </summary>
        /// <value>A description of the bin on the card to identify what type of product the card is.</value>
        [DataMember(Name = "bin_description", EmitDefaultValue = false)]
        public string BinDescription { get; set; }

        /// <summary>
        /// Defines whether the card is regulated within the EU.
        /// </summary>
        /// <value>Defines whether the card is regulated within the EU.</value>
        [DataMember(Name = "bin_eu", EmitDefaultValue = true)]
        public bool BinEu { get; set; }

        /// <summary>
        /// The scheme that issued the card.
        /// </summary>
        /// <value>The scheme that issued the card.</value>
        [DataMember(Name = "scheme", EmitDefaultValue = false)]
        public string Scheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bin {\n");
            sb.Append("  BinCommercial: ").Append(BinCommercial).Append("\n");
            sb.Append("  BinCorporate: ").Append(BinCorporate).Append("\n");
            sb.Append("  BinCountryIssued: ").Append(BinCountryIssued).Append("\n");
            sb.Append("  BinCredit: ").Append(BinCredit).Append("\n");
            sb.Append("  BinCurrency: ").Append(BinCurrency).Append("\n");
            sb.Append("  BinDebit: ").Append(BinDebit).Append("\n");
            sb.Append("  BinDescription: ").Append(BinDescription).Append("\n");
            sb.Append("  BinEu: ").Append(BinEu).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bin);
        }

        /// <summary>
        /// Returns true if Bin instances are equal
        /// </summary>
        /// <param name="input">Instance of Bin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinCommercial == input.BinCommercial ||
                    this.BinCommercial.Equals(input.BinCommercial)
                ) && 
                (
                    this.BinCorporate == input.BinCorporate ||
                    this.BinCorporate.Equals(input.BinCorporate)
                ) && 
                (
                    this.BinCountryIssued == input.BinCountryIssued ||
                    (this.BinCountryIssued != null &&
                    this.BinCountryIssued.Equals(input.BinCountryIssued))
                ) && 
                (
                    this.BinCredit == input.BinCredit ||
                    this.BinCredit.Equals(input.BinCredit)
                ) && 
                (
                    this.BinCurrency == input.BinCurrency ||
                    (this.BinCurrency != null &&
                    this.BinCurrency.Equals(input.BinCurrency))
                ) && 
                (
                    this.BinDebit == input.BinDebit ||
                    this.BinDebit.Equals(input.BinDebit)
                ) && 
                (
                    this.BinDescription == input.BinDescription ||
                    (this.BinDescription != null &&
                    this.BinDescription.Equals(input.BinDescription))
                ) && 
                (
                    this.BinEu == input.BinEu ||
                    this.BinEu.Equals(input.BinEu)
                ) && 
                (
                    this.Scheme == input.Scheme ||
                    (this.Scheme != null &&
                    this.Scheme.Equals(input.Scheme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.BinCommercial.GetHashCode();
                hashCode = hashCode * 59 + this.BinCorporate.GetHashCode();
                if (this.BinCountryIssued != null)
                    hashCode = hashCode * 59 + this.BinCountryIssued.GetHashCode();
                hashCode = hashCode * 59 + this.BinCredit.GetHashCode();
                if (this.BinCurrency != null)
                    hashCode = hashCode * 59 + this.BinCurrency.GetHashCode();
                hashCode = hashCode * 59 + this.BinDebit.GetHashCode();
                if (this.BinDescription != null)
                    hashCode = hashCode * 59 + this.BinDescription.GetHashCode();
                hashCode = hashCode * 59 + this.BinEu.GetHashCode();
                if (this.Scheme != null)
                    hashCode = hashCode * 59 + this.Scheme.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
