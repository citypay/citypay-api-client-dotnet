/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// Cart
    /// </summary>
    [DataContract(Name = "Cart")]
    public partial class Cart : IEquatable<Cart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cart" /> class.
        /// </summary>
        /// <param name="contents">Any cart items to list against the cart..</param>
        /// <param name="coupon">A coupon redeemed with the transaction..</param>
        /// <param name="mode">The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities. .</param>
        /// <param name="productDescription">Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels..</param>
        /// <param name="productInformation">Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page..</param>
        /// <param name="shipping">The shipping amount of the transaction in the lowest denomination of currency..</param>
        /// <param name="tax">The tax amount of the transaction in the lowest denomination of currency..</param>
        public Cart(string contents = default(string), string coupon = default(string), ModelInt mode = default(ModelInt), string productDescription = default(string), string productInformation = default(string), ModelInt shipping = default(ModelInt), ModelInt tax = default(ModelInt))
        {
            this.Contents = contents;
            this.Coupon = coupon;
            this.Mode = mode;
            this.ProductDescription = productDescription;
            this.ProductInformation = productInformation;
            this.Shipping = shipping;
            this.Tax = tax;
        }

        /// <summary>
        /// Any cart items to list against the cart.
        /// </summary>
        /// <value>Any cart items to list against the cart.</value>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public string Contents { get; set; }

        /// <summary>
        /// A coupon redeemed with the transaction.
        /// </summary>
        /// <value>A coupon redeemed with the transaction.</value>
        [DataMember(Name = "coupon", EmitDefaultValue = false)]
        public string Coupon { get; set; }

        /// <summary>
        /// The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities. 
        /// </summary>
        /// <value>The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities. </value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModelInt Mode { get; set; }

        /// <summary>
        /// Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.
        /// </summary>
        /// <value>Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.</value>
        [DataMember(Name = "productDescription", EmitDefaultValue = false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.
        /// </summary>
        /// <value>Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.</value>
        [DataMember(Name = "productInformation", EmitDefaultValue = false)]
        public string ProductInformation { get; set; }

        /// <summary>
        /// The shipping amount of the transaction in the lowest denomination of currency.
        /// </summary>
        /// <value>The shipping amount of the transaction in the lowest denomination of currency.</value>
        [DataMember(Name = "shipping", EmitDefaultValue = false)]
        public ModelInt Shipping { get; set; }

        /// <summary>
        /// The tax amount of the transaction in the lowest denomination of currency.
        /// </summary>
        /// <value>The tax amount of the transaction in the lowest denomination of currency.</value>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        public ModelInt Tax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cart {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  ProductInformation: ").Append(ProductInformation).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cart);
        }

        /// <summary>
        /// Returns true if Cart instances are equal
        /// </summary>
        /// <param name="input">Instance of Cart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                ) && 
                (
                    this.Coupon == input.Coupon ||
                    (this.Coupon != null &&
                    this.Coupon.Equals(input.Coupon))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.ProductDescription == input.ProductDescription ||
                    (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) && 
                (
                    this.ProductInformation == input.ProductInformation ||
                    (this.ProductInformation != null &&
                    this.ProductInformation.Equals(input.ProductInformation))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                if (this.Coupon != null)
                    hashCode = hashCode * 59 + this.Coupon.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.ProductInformation != null)
                    hashCode = hashCode * 59 + this.ProductInformation.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
