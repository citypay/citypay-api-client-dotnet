/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkAttachmentRequest
    /// </summary>
    [DataContract(Name = "PaylinkAttachmentRequest")]
    public partial class PaylinkAttachmentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkAttachmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaylinkAttachmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkAttachmentRequest" /> class.
        /// </summary>
        /// <param name="data">base64 encoding of the file if less than 32kb in size..</param>
        /// <param name="filename">The name of the attachment normally taken from the filename. You should not include the filename path as appropriate. (required).</param>
        /// <param name="mimeType">The mime type of the attachment as defined in [RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html). Currently only &#x60;application/pdf&#x60; is supported. (required).</param>
        /// <param name="name">A name for the file to identify it to the card holder when it is displayed in the payment form. For example Invoice, Statement..</param>
        /// <param name="retention">The retention period in days of the attachment. Defaults to 180 days..</param>
        public PaylinkAttachmentRequest(string data = default(string), string filename = default(string), string mimeType = default(string), string name = default(string), int retention = default(int))
        {
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new ArgumentNullException("filename is a required property for PaylinkAttachmentRequest and cannot be null");
            }
            this.Filename = filename;
            // to ensure "mimeType" is required (not null)
            if (mimeType == null)
            {
                throw new ArgumentNullException("mimeType is a required property for PaylinkAttachmentRequest and cannot be null");
            }
            this.MimeType = mimeType;
            this.Data = data;
            this.Name = name;
            this.Retention = retention;
        }

        /// <summary>
        /// base64 encoding of the file if less than 32kb in size.
        /// </summary>
        /// <value>base64 encoding of the file if less than 32kb in size.</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// The name of the attachment normally taken from the filename. You should not include the filename path as appropriate.
        /// </summary>
        /// <value>The name of the attachment normally taken from the filename. You should not include the filename path as appropriate.</value>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// The mime type of the attachment as defined in [RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html). Currently only &#x60;application/pdf&#x60; is supported.
        /// </summary>
        /// <value>The mime type of the attachment as defined in [RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html). Currently only &#x60;application/pdf&#x60; is supported.</value>
        [DataMember(Name = "mime_type", IsRequired = true, EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// A name for the file to identify it to the card holder when it is displayed in the payment form. For example Invoice, Statement.
        /// </summary>
        /// <value>A name for the file to identify it to the card holder when it is displayed in the payment form. For example Invoice, Statement.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The retention period in days of the attachment. Defaults to 180 days.
        /// </summary>
        /// <value>The retention period in days of the attachment. Defaults to 180 days.</value>
        [DataMember(Name = "retention", EmitDefaultValue = false)]
        public int Retention { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkAttachmentRequest {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Retention: ").Append(Retention).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
