/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// RegisterCard
    /// </summary>
    [DataContract(Name = "RegisterCard")]
    public partial class RegisterCard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterCard" /> class.
        /// </summary>
        /// <param name="cardnumber">The primary number of the card. (required).</param>
        /// <param name="varDefault">Determines whether the card should be the new default card..</param>
        /// <param name="expmonth">The expiry month of the card. (required).</param>
        /// <param name="expyear">The expiry year of the card. (required).</param>
        /// <param name="nameOnCard">The card holder name as it appears on the card. The value is required if the account is to be used for 3dsv2 processing, otherwise it is optional..</param>
        public RegisterCard(string cardnumber = default(string), bool varDefault = default(bool), int expmonth = default(int), int expyear = default(int), string nameOnCard = default(string))
        {
            // to ensure "cardnumber" is required (not null)
            if (cardnumber == null)
            {
                throw new ArgumentNullException("cardnumber is a required property for RegisterCard and cannot be null");
            }
            this.Cardnumber = cardnumber;
            this.Expmonth = expmonth;
            this.Expyear = expyear;
            this.VarDefault = varDefault;
            this.NameOnCard = nameOnCard;
        }

        /// <summary>
        /// The primary number of the card.
        /// </summary>
        /// <value>The primary number of the card.</value>
        /// <example>4000 0000 0000 0002</example>
        [DataMember(Name = "cardnumber", IsRequired = true, EmitDefaultValue = true)]
        public string Cardnumber { get; set; }

        /// <summary>
        /// Determines whether the card should be the new default card.
        /// </summary>
        /// <value>Determines whether the card should be the new default card.</value>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool VarDefault { get; set; }

        /// <summary>
        /// The expiry month of the card.
        /// </summary>
        /// <value>The expiry month of the card.</value>
        /// <example>9</example>
        [DataMember(Name = "expmonth", IsRequired = true, EmitDefaultValue = true)]
        public int Expmonth { get; set; }

        /// <summary>
        /// The expiry year of the card.
        /// </summary>
        /// <value>The expiry year of the card.</value>
        /// <example>2027</example>
        [DataMember(Name = "expyear", IsRequired = true, EmitDefaultValue = true)]
        public int Expyear { get; set; }

        /// <summary>
        /// The card holder name as it appears on the card. The value is required if the account is to be used for 3dsv2 processing, otherwise it is optional.
        /// </summary>
        /// <value>The card holder name as it appears on the card. The value is required if the account is to be used for 3dsv2 processing, otherwise it is optional.</value>
        /// <example>MR NE BODY</example>
        [DataMember(Name = "name_on_card", EmitDefaultValue = false)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterCard {\n");
            sb.Append("  Cardnumber: ").Append(Cardnumber).Append("\n");
            sb.Append("  VarDefault: ").Append(VarDefault).Append("\n");
            sb.Append("  Expmonth: ").Append(Expmonth).Append("\n");
            sb.Append("  Expyear: ").Append(Expyear).Append("\n");
            sb.Append("  NameOnCard: ").Append(NameOnCard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cardnumber (string) maxLength
            if (this.Cardnumber != null && this.Cardnumber.Length > 22)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cardnumber, length must be less than 22.", new [] { "Cardnumber" });
            }

            // Cardnumber (string) minLength
            if (this.Cardnumber != null && this.Cardnumber.Length < 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cardnumber, length must be greater than 12.", new [] { "Cardnumber" });
            }

            // Expmonth (int) maximum
            if (this.Expmonth > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value less than or equal to 12.", new [] { "Expmonth" });
            }

            // Expmonth (int) minimum
            if (this.Expmonth < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expmonth, must be a value greater than or equal to 1.", new [] { "Expmonth" });
            }

            // Expyear (int) maximum
            if (this.Expyear > (int)2100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value less than or equal to 2100.", new [] { "Expyear" });
            }

            // Expyear (int) minimum
            if (this.Expyear < (int)2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expyear, must be a value greater than or equal to 2000.", new [] { "Expyear" });
            }

            // NameOnCard (string) maxLength
            if (this.NameOnCard != null && this.NameOnCard.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOnCard, length must be less than 45.", new [] { "NameOnCard" });
            }

            // NameOnCard (string) minLength
            if (this.NameOnCard != null && this.NameOnCard.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOnCard, length must be greater than 2.", new [] { "NameOnCard" });
            }

            yield break;
        }
    }

}
