/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkConfig
    /// </summary>
    [DataContract(Name = "PaylinkConfig")]
    public partial class PaylinkConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkConfig" /> class.
        /// </summary>
        /// <param name="acsMode">Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer&#39;s URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (&lt; 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience. .</param>
        /// <param name="customParams">customParams.</param>
        /// <param name="descriptor">Directly specify the merchant descriptor used for the transaction to be displayed on the payment page..</param>
        /// <param name="expireIn">Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes. .</param>
        /// <param name="fieldGuard">fieldGuard.</param>
        /// <param name="lockParams">lockParams.</param>
        /// <param name="merchLogo">A URL of a logo to include in the form. The URL should be delivered using HTTPS..</param>
        /// <param name="merchTerms">A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed..</param>
        /// <param name="options">options.</param>
        /// <param name="partPayments">partPayments.</param>
        /// <param name="passThroughData">passThroughData.</param>
        /// <param name="passThroughHeaders">passThroughHeaders.</param>
        /// <param name="postback">Specifies a URL to use for a call back when the payment is completed. see Postback Handling }..</param>
        /// <param name="postbackPassword">A password to be added to the postback for HTTP Basic Authentication..</param>
        /// <param name="postbackPolicy">The policy setting for the postback see Postback Handling..</param>
        /// <param name="postbackUsername">A username to be added to the postback for HTTP Basic Authentication..</param>
        /// <param name="redirectDelay">A value which can delay the redirection in seconds. A value of 0 will redirect immediately..</param>
        /// <param name="redirectFailure">A URL which the browser is redirected to on non-completion of a transaction..</param>
        /// <param name="redirectSuccess">A URL which the browser is redirected to on authorisation of a transaction..</param>
        /// <param name="renderer">The Paylink renderer engine to use..</param>
        /// <param name="returnParams">If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters..</param>
        /// <param name="ui">ui.</param>
        public PaylinkConfig(string acsMode = default(string), List<PaylinkCustomParam> customParams = default(List<PaylinkCustomParam>), string descriptor = default(string), string expireIn = default(string), List<PaylinkFieldGuardModel> fieldGuard = default(List<PaylinkFieldGuardModel>), List<string> lockParams = default(List<string>), string merchLogo = default(string), string merchTerms = default(string), List<string> options = default(List<string>), PaylinkPartPayments partPayments = default(PaylinkPartPayments), Dictionary<string, string> passThroughData = default(Dictionary<string, string>), Dictionary<string, string> passThroughHeaders = default(Dictionary<string, string>), string postback = default(string), string postbackPassword = default(string), string postbackPolicy = default(string), string postbackUsername = default(string), int redirectDelay = default(int), string redirectFailure = default(string), string redirectSuccess = default(string), string renderer = default(string), bool returnParams = default(bool), PaylinkUI ui = default(PaylinkUI))
        {
            this.AcsMode = acsMode;
            this.CustomParams = customParams;
            this.Descriptor = descriptor;
            this.ExpireIn = expireIn;
            this.FieldGuard = fieldGuard;
            this.LockParams = lockParams;
            this.MerchLogo = merchLogo;
            this.MerchTerms = merchTerms;
            this.Options = options;
            this.PartPayments = partPayments;
            this.PassThroughData = passThroughData;
            this.PassThroughHeaders = passThroughHeaders;
            this.Postback = postback;
            this.PostbackPassword = postbackPassword;
            this.PostbackPolicy = postbackPolicy;
            this.PostbackUsername = postbackUsername;
            this.RedirectDelay = redirectDelay;
            this.RedirectFailure = redirectFailure;
            this.RedirectSuccess = redirectSuccess;
            this.Renderer = renderer;
            this.ReturnParams = returnParams;
            this.Ui = ui;
        }

        /// <summary>
        /// Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer&#39;s URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (&lt; 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience. 
        /// </summary>
        /// <value>Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer&#39;s URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (&lt; 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience. </value>
        [DataMember(Name = "acs_mode", EmitDefaultValue = false)]
        public string AcsMode { get; set; }

        /// <summary>
        /// Gets or Sets CustomParams
        /// </summary>
        [DataMember(Name = "custom_params", EmitDefaultValue = false)]
        public List<PaylinkCustomParam> CustomParams { get; set; }

        /// <summary>
        /// Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.
        /// </summary>
        /// <value>Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.</value>
        [DataMember(Name = "descriptor", EmitDefaultValue = false)]
        public string Descriptor { get; set; }

        /// <summary>
        /// Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes. 
        /// </summary>
        /// <value>Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes. </value>
        [DataMember(Name = "expire_in", EmitDefaultValue = false)]
        public string ExpireIn { get; set; }

        /// <summary>
        /// Gets or Sets FieldGuard
        /// </summary>
        [DataMember(Name = "field_guard", EmitDefaultValue = false)]
        public List<PaylinkFieldGuardModel> FieldGuard { get; set; }

        /// <summary>
        /// Gets or Sets LockParams
        /// </summary>
        [DataMember(Name = "lock_params", EmitDefaultValue = false)]
        public List<string> LockParams { get; set; }

        /// <summary>
        /// A URL of a logo to include in the form. The URL should be delivered using HTTPS.
        /// </summary>
        /// <value>A URL of a logo to include in the form. The URL should be delivered using HTTPS.</value>
        [DataMember(Name = "merch_logo", EmitDefaultValue = false)]
        public string MerchLogo { get; set; }

        /// <summary>
        /// A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.
        /// </summary>
        /// <value>A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.</value>
        [DataMember(Name = "merch_terms", EmitDefaultValue = false)]
        public string MerchTerms { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<string> Options { get; set; }

        /// <summary>
        /// Gets or Sets PartPayments
        /// </summary>
        [DataMember(Name = "part_payments", EmitDefaultValue = false)]
        public PaylinkPartPayments PartPayments { get; set; }

        /// <summary>
        /// Gets or Sets PassThroughData
        /// </summary>
        [DataMember(Name = "pass_through_data", EmitDefaultValue = false)]
        public Dictionary<string, string> PassThroughData { get; set; }

        /// <summary>
        /// Gets or Sets PassThroughHeaders
        /// </summary>
        [DataMember(Name = "pass_through_headers", EmitDefaultValue = false)]
        public Dictionary<string, string> PassThroughHeaders { get; set; }

        /// <summary>
        /// Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.
        /// </summary>
        /// <value>Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.</value>
        [DataMember(Name = "postback", EmitDefaultValue = false)]
        public string Postback { get; set; }

        /// <summary>
        /// A password to be added to the postback for HTTP Basic Authentication.
        /// </summary>
        /// <value>A password to be added to the postback for HTTP Basic Authentication.</value>
        [DataMember(Name = "postback_password", EmitDefaultValue = false)]
        public string PostbackPassword { get; set; }

        /// <summary>
        /// The policy setting for the postback see Postback Handling.
        /// </summary>
        /// <value>The policy setting for the postback see Postback Handling.</value>
        [DataMember(Name = "postback_policy", EmitDefaultValue = false)]
        public string PostbackPolicy { get; set; }

        /// <summary>
        /// A username to be added to the postback for HTTP Basic Authentication.
        /// </summary>
        /// <value>A username to be added to the postback for HTTP Basic Authentication.</value>
        [DataMember(Name = "postback_username", EmitDefaultValue = false)]
        public string PostbackUsername { get; set; }

        /// <summary>
        /// A value which can delay the redirection in seconds. A value of 0 will redirect immediately.
        /// </summary>
        /// <value>A value which can delay the redirection in seconds. A value of 0 will redirect immediately.</value>
        [DataMember(Name = "redirect_delay", EmitDefaultValue = false)]
        public int RedirectDelay { get; set; }

        /// <summary>
        /// A URL which the browser is redirected to on non-completion of a transaction.
        /// </summary>
        /// <value>A URL which the browser is redirected to on non-completion of a transaction.</value>
        [DataMember(Name = "redirect_failure", EmitDefaultValue = false)]
        public string RedirectFailure { get; set; }

        /// <summary>
        /// A URL which the browser is redirected to on authorisation of a transaction.
        /// </summary>
        /// <value>A URL which the browser is redirected to on authorisation of a transaction.</value>
        [DataMember(Name = "redirect_success", EmitDefaultValue = false)]
        public string RedirectSuccess { get; set; }

        /// <summary>
        /// The Paylink renderer engine to use.
        /// </summary>
        /// <value>The Paylink renderer engine to use.</value>
        [DataMember(Name = "renderer", EmitDefaultValue = false)]
        public string Renderer { get; set; }

        /// <summary>
        /// If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.
        /// </summary>
        /// <value>If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.</value>
        [DataMember(Name = "return_params", EmitDefaultValue = true)]
        public bool ReturnParams { get; set; }

        /// <summary>
        /// Gets or Sets Ui
        /// </summary>
        [DataMember(Name = "ui", EmitDefaultValue = false)]
        public PaylinkUI Ui { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkConfig {\n");
            sb.Append("  AcsMode: ").Append(AcsMode).Append("\n");
            sb.Append("  CustomParams: ").Append(CustomParams).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  ExpireIn: ").Append(ExpireIn).Append("\n");
            sb.Append("  FieldGuard: ").Append(FieldGuard).Append("\n");
            sb.Append("  LockParams: ").Append(LockParams).Append("\n");
            sb.Append("  MerchLogo: ").Append(MerchLogo).Append("\n");
            sb.Append("  MerchTerms: ").Append(MerchTerms).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  PartPayments: ").Append(PartPayments).Append("\n");
            sb.Append("  PassThroughData: ").Append(PassThroughData).Append("\n");
            sb.Append("  PassThroughHeaders: ").Append(PassThroughHeaders).Append("\n");
            sb.Append("  Postback: ").Append(Postback).Append("\n");
            sb.Append("  PostbackPassword: ").Append(PostbackPassword).Append("\n");
            sb.Append("  PostbackPolicy: ").Append(PostbackPolicy).Append("\n");
            sb.Append("  PostbackUsername: ").Append(PostbackUsername).Append("\n");
            sb.Append("  RedirectDelay: ").Append(RedirectDelay).Append("\n");
            sb.Append("  RedirectFailure: ").Append(RedirectFailure).Append("\n");
            sb.Append("  RedirectSuccess: ").Append(RedirectSuccess).Append("\n");
            sb.Append("  Renderer: ").Append(Renderer).Append("\n");
            sb.Append("  ReturnParams: ").Append(ReturnParams).Append("\n");
            sb.Append("  Ui: ").Append(Ui).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
