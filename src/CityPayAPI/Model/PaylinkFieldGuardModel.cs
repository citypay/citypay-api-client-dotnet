/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkFieldGuardModel
    /// </summary>
    [DataContract(Name = "PaylinkFieldGuardModel")]
    public partial class PaylinkFieldGuardModel : IEquatable<PaylinkFieldGuardModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkFieldGuardModel" /> class.
        /// </summary>
        /// <param name="fieldType">A type of HTML element that should be displayed such as text, password, url. Any HTML5 input type value may be supplied..</param>
        /// <param name="label">A label for the field guard to display on the authentication page..</param>
        /// <param name="maxlen">A maximum length of any value supplied in the field guard form. Used for validating entry..</param>
        /// <param name="minlen">A minimum length of any value supplied in the field guard form. Used for validating entry..</param>
        /// <param name="name">A field name which is used to refer to a field which is guarded..</param>
        /// <param name="regex">A JavaScript regular expression value which can be used to validate the data provided in the field guard entry form. Used for validating entry..</param>
        /// <param name="value">A value directly associated with the field guard. Any value provided at this level will be considered as sensitive and not logged..</param>
        public PaylinkFieldGuardModel(string fieldType = default(string), string label = default(string), int maxlen = default(int), int minlen = default(int), string name = default(string), string regex = default(string), string value = default(string))
        {
            this.FieldType = fieldType;
            this.Label = label;
            this.Maxlen = maxlen;
            this.Minlen = minlen;
            this.Name = name;
            this.Regex = regex;
            this.Value = value;
        }

        /// <summary>
        /// A type of HTML element that should be displayed such as text, password, url. Any HTML5 input type value may be supplied.
        /// </summary>
        /// <value>A type of HTML element that should be displayed such as text, password, url. Any HTML5 input type value may be supplied.</value>
        [DataMember(Name = "field_type", EmitDefaultValue = false)]
        public string FieldType { get; set; }

        /// <summary>
        /// A label for the field guard to display on the authentication page.
        /// </summary>
        /// <value>A label for the field guard to display on the authentication page.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// A maximum length of any value supplied in the field guard form. Used for validating entry.
        /// </summary>
        /// <value>A maximum length of any value supplied in the field guard form. Used for validating entry.</value>
        [DataMember(Name = "maxlen", EmitDefaultValue = false)]
        public int Maxlen { get; set; }

        /// <summary>
        /// A minimum length of any value supplied in the field guard form. Used for validating entry.
        /// </summary>
        /// <value>A minimum length of any value supplied in the field guard form. Used for validating entry.</value>
        [DataMember(Name = "minlen", EmitDefaultValue = false)]
        public int Minlen { get; set; }

        /// <summary>
        /// A field name which is used to refer to a field which is guarded.
        /// </summary>
        /// <value>A field name which is used to refer to a field which is guarded.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A JavaScript regular expression value which can be used to validate the data provided in the field guard entry form. Used for validating entry.
        /// </summary>
        /// <value>A JavaScript regular expression value which can be used to validate the data provided in the field guard entry form. Used for validating entry.</value>
        [DataMember(Name = "regex", EmitDefaultValue = false)]
        public string Regex { get; set; }

        /// <summary>
        /// A value directly associated with the field guard. Any value provided at this level will be considered as sensitive and not logged.
        /// </summary>
        /// <value>A value directly associated with the field guard. Any value provided at this level will be considered as sensitive and not logged.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkFieldGuardModel {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Maxlen: ").Append(Maxlen).Append("\n");
            sb.Append("  Minlen: ").Append(Minlen).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaylinkFieldGuardModel);
        }

        /// <summary>
        /// Returns true if PaylinkFieldGuardModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaylinkFieldGuardModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaylinkFieldGuardModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Maxlen == input.Maxlen ||
                    this.Maxlen.Equals(input.Maxlen)
                ) && 
                (
                    this.Minlen == input.Minlen ||
                    this.Minlen.Equals(input.Minlen)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldType != null)
                {
                    hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Maxlen.GetHashCode();
                hashCode = (hashCode * 59) + this.Minlen.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Regex != null)
                {
                    hashCode = (hashCode * 59) + this.Regex.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
