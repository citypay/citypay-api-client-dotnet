/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// DirectTokenAuthRequest
    /// </summary>
    [DataContract(Name = "DirectTokenAuthRequest")]
    public partial class DirectTokenAuthRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectTokenAuthRequest" /> class.
        /// </summary>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function. .</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. .</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request. .</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology. .</param>
        public DirectTokenAuthRequest(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string))
        {
            this.Nonce = nonce;
            this.RedirectFailure = redirectFailure;
            this.RedirectSuccess = redirectSuccess;
            this.Token = token;
        }

        /// <summary>
        /// A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function. 
        /// </summary>
        /// <value>A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function. </value>
        /// <example>0123456789ABCDEF</example>
        [DataMember(Name = "nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. 
        /// </summary>
        /// <value>The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. </value>
        /// <example>https://pay.mystore.com/continue_failure</example>
        [DataMember(Name = "redirect_failure", EmitDefaultValue = false)]
        public string RedirectFailure { get; set; }

        /// <summary>
        /// The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request. 
        /// </summary>
        /// <value>The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request. </value>
        /// <example>https://pay.mystore.com/continue_success</example>
        [DataMember(Name = "redirect_success", EmitDefaultValue = false)]
        public string RedirectSuccess { get; set; }

        /// <summary>
        /// The token required to process the transaction as presented by the direct post methodology. 
        /// </summary>
        /// <value>The token required to process the transaction as presented by the direct post methodology. </value>
        /// <example>ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr</example>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DirectTokenAuthRequest {\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  RedirectFailure: ").Append(RedirectFailure).Append("\n");
            sb.Append("  RedirectSuccess: ").Append(RedirectSuccess).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
