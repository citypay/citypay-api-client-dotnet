/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CityPayAPI.Client;
using CityPayAPI.Model;

namespace CityPayAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectPostAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>AuthResponse</returns>
        AuthResponse DirectCResAuthRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string));

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> DirectCResAuthRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string));
        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>TokenisationResponseModel</returns>
        TokenisationResponseModel DirectCResTokeniseRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string));

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>ApiResponse of TokenisationResponseModel</returns>
        ApiResponse<TokenisationResponseModel> DirectCResTokeniseRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string));
        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>AuthResponse</returns>
        AuthResponse DirectPostAuthRequest(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string));

        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> DirectPostAuthRequestWithHttpInfo(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string));
        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>AuthResponse</returns>
        AuthResponse DirectPostTokeniseRequest(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string));

        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> DirectPostTokeniseRequestWithHttpInfo(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string));
        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <returns>AuthResponse</returns>
        AuthResponse TokenRequest(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string));

        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> TokenRequestWithHttpInfo(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectPostAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> DirectCResAuthRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> DirectCResAuthRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenisationResponseModel</returns>
        System.Threading.Tasks.Task<TokenisationResponseModel> DirectCResTokeniseRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation
        /// </summary>
        /// <remarks>
        /// Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenisationResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenisationResponseModel>> DirectCResTokeniseRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> DirectPostAuthRequestAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct Post Auth Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> DirectPostAuthRequestWithHttpInfoAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> DirectPostTokeniseRequestAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct Post Tokenise Request
        /// </summary>
        /// <remarks>
        /// Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> DirectPostTokeniseRequestWithHttpInfoAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> TokenRequestAsync(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Direct Post Token Request
        /// </summary>
        /// <remarks>
        /// Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> TokenRequestWithHttpInfoAsync(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectPostAPIApi : IDirectPostAPIApiSync, IDirectPostAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DirectPostAPIApi : IDirectPostAPIApi
    {
        private CityPayAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectPostAPIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectPostAPIApi(string basePath)
        {
            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                new CityPayAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DirectPostAPIApi(CityPayAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPostAPIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DirectPostAPIApi(CityPayAPI.Client.ISynchronousClient client, CityPayAPI.Client.IAsynchronousClient asyncClient, CityPayAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CityPayAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CityPayAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CityPayAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPayAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse DirectCResAuthRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = DirectCResAuthRequestWithHttpInfo(uuid, cres, threeDSSessionData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> DirectCResAuthRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostAPIApi->DirectCResAuthRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/cres/auth/{uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResAuthRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> DirectCResAuthRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await DirectCResAuthRequestWithHttpInfoAsync(uuid, cres, threeDSSessionData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back the result of authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> DirectCResAuthRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostAPIApi->DirectCResAuthRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/cres/auth/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResAuthRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>TokenisationResponseModel</returns>
        public TokenisationResponseModel DirectCResTokeniseRequest(string uuid, string cres = default(string), string threeDSSessionData = default(string))
        {
            CityPayAPI.Client.ApiResponse<TokenisationResponseModel> localVarResponse = DirectCResTokeniseRequestWithHttpInfo(uuid, cres, threeDSSessionData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <returns>ApiResponse of TokenisationResponseModel</returns>
        public CityPayAPI.Client.ApiResponse<TokenisationResponseModel> DirectCResTokeniseRequestWithHttpInfo(string uuid, string cres = default(string), string threeDSSessionData = default(string))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostAPIApi->DirectCResTokeniseRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenisationResponseModel>("/direct/cres/tokenise/{uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResTokeniseRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenisationResponseModel</returns>
        public async System.Threading.Tasks.Task<TokenisationResponseModel> DirectCResTokeniseRequestAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<TokenisationResponseModel> localVarResponse = await DirectCResTokeniseRequestWithHttpInfoAsync(uuid, cres, threeDSSessionData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handles a CRes response from ACS, returning back a token for future authorisation Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">An identifier used to track the CReq/CRes cycle.</param>
        /// <param name="cres">The CRES from the ACS. (optional)</param>
        /// <param name="threeDSSessionData">The session data from the ACS. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenisationResponseModel)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<TokenisationResponseModel>> DirectCResTokeniseRequestWithHttpInfoAsync(string uuid, string cres = default(string), string threeDSSessionData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'uuid' when calling DirectPostAPIApi->DirectCResTokeniseRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("uuid", CityPayAPI.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            if (cres != null)
            {
                localVarRequestOptions.FormParameters.Add("cres", CityPayAPI.Client.ClientUtils.ParameterToString(cres)); // form parameter
            }
            if (threeDSSessionData != null)
            {
                localVarRequestOptions.FormParameters.Add("threeDSSessionData", CityPayAPI.Client.ClientUtils.ParameterToString(threeDSSessionData)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenisationResponseModel>("/direct/cres/tokenise/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectCResTokeniseRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse DirectPostAuthRequest(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = DirectPostAuthRequestWithHttpInfo(amount, cardnumber, expmonth, expyear, identifier, avsPostcodePolicy, billTo, csc, cscPolicy, currency, duplicatePolicy, matchAvsa, nameOnCard, nonce, redirectFailure, redirectSuccess, shipTo, threedsecure, transInfo, transType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> DirectPostAuthRequestWithHttpInfo(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string))
        {
            // verify the required parameter 'cardnumber' is set
            if (cardnumber == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardnumber' when calling DirectPostAPIApi->DirectPostAuthRequest");

            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'identifier' when calling DirectPostAPIApi->DirectPostAuthRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("amount", CityPayAPI.Client.ClientUtils.ParameterToString(amount)); // form parameter
            if (avsPostcodePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("avs_postcode_policy", CityPayAPI.Client.ClientUtils.ParameterToString(avsPostcodePolicy)); // form parameter
            }
            if (billTo != null)
            {
                localVarRequestOptions.FormParameters.Add("bill_to", CityPayAPI.Client.ClientUtils.ParameterToString(billTo)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("cardnumber", CityPayAPI.Client.ClientUtils.ParameterToString(cardnumber)); // form parameter
            if (csc != null)
            {
                localVarRequestOptions.FormParameters.Add("csc", CityPayAPI.Client.ClientUtils.ParameterToString(csc)); // form parameter
            }
            if (cscPolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("csc_policy", CityPayAPI.Client.ClientUtils.ParameterToString(cscPolicy)); // form parameter
            }
            if (currency != null)
            {
                localVarRequestOptions.FormParameters.Add("currency", CityPayAPI.Client.ClientUtils.ParameterToString(currency)); // form parameter
            }
            if (duplicatePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("duplicate_policy", CityPayAPI.Client.ClientUtils.ParameterToString(duplicatePolicy)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("expmonth", CityPayAPI.Client.ClientUtils.ParameterToString(expmonth)); // form parameter
            localVarRequestOptions.FormParameters.Add("expyear", CityPayAPI.Client.ClientUtils.ParameterToString(expyear)); // form parameter
            localVarRequestOptions.FormParameters.Add("identifier", CityPayAPI.Client.ClientUtils.ParameterToString(identifier)); // form parameter
            if (matchAvsa != null)
            {
                localVarRequestOptions.FormParameters.Add("match_avsa", CityPayAPI.Client.ClientUtils.ParameterToString(matchAvsa)); // form parameter
            }
            if (nameOnCard != null)
            {
                localVarRequestOptions.FormParameters.Add("name_on_card", CityPayAPI.Client.ClientUtils.ParameterToString(nameOnCard)); // form parameter
            }
            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", CityPayAPI.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (redirectFailure != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_failure", CityPayAPI.Client.ClientUtils.ParameterToString(redirectFailure)); // form parameter
            }
            if (redirectSuccess != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_success", CityPayAPI.Client.ClientUtils.ParameterToString(redirectSuccess)); // form parameter
            }
            if (shipTo != null)
            {
                localVarRequestOptions.FormParameters.Add("ship_to", CityPayAPI.Client.ClientUtils.ParameterToString(shipTo)); // form parameter
            }
            if (threedsecure != null)
            {
                localVarRequestOptions.FormParameters.Add("threedsecure", CityPayAPI.Client.ClientUtils.ParameterToString(threedsecure)); // form parameter
            }
            if (transInfo != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_info", CityPayAPI.Client.ClientUtils.ParameterToString(transInfo)); // form parameter
            }
            if (transType != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_type", CityPayAPI.Client.ClientUtils.ParameterToString(transType)); // form parameter
            }

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostAuthRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> DirectPostAuthRequestAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await DirectPostAuthRequestWithHttpInfoAsync(amount, cardnumber, expmonth, expyear, identifier, avsPostcodePolicy, billTo, csc, cscPolicy, currency, duplicatePolicy, matchAvsa, nameOnCard, nonce, redirectFailure, redirectSuccess, shipTo, threedsecure, transInfo, transType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Auth Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> DirectPostAuthRequestWithHttpInfoAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardnumber' is set
            if (cardnumber == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardnumber' when calling DirectPostAPIApi->DirectPostAuthRequest");

            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'identifier' when calling DirectPostAPIApi->DirectPostAuthRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("amount", CityPayAPI.Client.ClientUtils.ParameterToString(amount)); // form parameter
            if (avsPostcodePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("avs_postcode_policy", CityPayAPI.Client.ClientUtils.ParameterToString(avsPostcodePolicy)); // form parameter
            }
            if (billTo != null)
            {
                localVarRequestOptions.FormParameters.Add("bill_to", CityPayAPI.Client.ClientUtils.ParameterToString(billTo)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("cardnumber", CityPayAPI.Client.ClientUtils.ParameterToString(cardnumber)); // form parameter
            if (csc != null)
            {
                localVarRequestOptions.FormParameters.Add("csc", CityPayAPI.Client.ClientUtils.ParameterToString(csc)); // form parameter
            }
            if (cscPolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("csc_policy", CityPayAPI.Client.ClientUtils.ParameterToString(cscPolicy)); // form parameter
            }
            if (currency != null)
            {
                localVarRequestOptions.FormParameters.Add("currency", CityPayAPI.Client.ClientUtils.ParameterToString(currency)); // form parameter
            }
            if (duplicatePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("duplicate_policy", CityPayAPI.Client.ClientUtils.ParameterToString(duplicatePolicy)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("expmonth", CityPayAPI.Client.ClientUtils.ParameterToString(expmonth)); // form parameter
            localVarRequestOptions.FormParameters.Add("expyear", CityPayAPI.Client.ClientUtils.ParameterToString(expyear)); // form parameter
            localVarRequestOptions.FormParameters.Add("identifier", CityPayAPI.Client.ClientUtils.ParameterToString(identifier)); // form parameter
            if (matchAvsa != null)
            {
                localVarRequestOptions.FormParameters.Add("match_avsa", CityPayAPI.Client.ClientUtils.ParameterToString(matchAvsa)); // form parameter
            }
            if (nameOnCard != null)
            {
                localVarRequestOptions.FormParameters.Add("name_on_card", CityPayAPI.Client.ClientUtils.ParameterToString(nameOnCard)); // form parameter
            }
            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", CityPayAPI.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (redirectFailure != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_failure", CityPayAPI.Client.ClientUtils.ParameterToString(redirectFailure)); // form parameter
            }
            if (redirectSuccess != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_success", CityPayAPI.Client.ClientUtils.ParameterToString(redirectSuccess)); // form parameter
            }
            if (shipTo != null)
            {
                localVarRequestOptions.FormParameters.Add("ship_to", CityPayAPI.Client.ClientUtils.ParameterToString(shipTo)); // form parameter
            }
            if (threedsecure != null)
            {
                localVarRequestOptions.FormParameters.Add("threedsecure", CityPayAPI.Client.ClientUtils.ParameterToString(threedsecure)); // form parameter
            }
            if (transInfo != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_info", CityPayAPI.Client.ClientUtils.ParameterToString(transInfo)); // form parameter
            }
            if (transType != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_type", CityPayAPI.Client.ClientUtils.ParameterToString(transType)); // form parameter
            }

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostAuthRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse DirectPostTokeniseRequest(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = DirectPostTokeniseRequestWithHttpInfo(amount, cardnumber, expmonth, expyear, identifier, avsPostcodePolicy, billTo, csc, cscPolicy, currency, duplicatePolicy, matchAvsa, nameOnCard, nonce, redirectFailure, redirectSuccess, shipTo, threedsecure, transInfo, transType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> DirectPostTokeniseRequestWithHttpInfo(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string))
        {
            // verify the required parameter 'cardnumber' is set
            if (cardnumber == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardnumber' when calling DirectPostAPIApi->DirectPostTokeniseRequest");

            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'identifier' when calling DirectPostAPIApi->DirectPostTokeniseRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("amount", CityPayAPI.Client.ClientUtils.ParameterToString(amount)); // form parameter
            if (avsPostcodePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("avs_postcode_policy", CityPayAPI.Client.ClientUtils.ParameterToString(avsPostcodePolicy)); // form parameter
            }
            if (billTo != null)
            {
                localVarRequestOptions.FormParameters.Add("bill_to", CityPayAPI.Client.ClientUtils.ParameterToString(billTo)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("cardnumber", CityPayAPI.Client.ClientUtils.ParameterToString(cardnumber)); // form parameter
            if (csc != null)
            {
                localVarRequestOptions.FormParameters.Add("csc", CityPayAPI.Client.ClientUtils.ParameterToString(csc)); // form parameter
            }
            if (cscPolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("csc_policy", CityPayAPI.Client.ClientUtils.ParameterToString(cscPolicy)); // form parameter
            }
            if (currency != null)
            {
                localVarRequestOptions.FormParameters.Add("currency", CityPayAPI.Client.ClientUtils.ParameterToString(currency)); // form parameter
            }
            if (duplicatePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("duplicate_policy", CityPayAPI.Client.ClientUtils.ParameterToString(duplicatePolicy)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("expmonth", CityPayAPI.Client.ClientUtils.ParameterToString(expmonth)); // form parameter
            localVarRequestOptions.FormParameters.Add("expyear", CityPayAPI.Client.ClientUtils.ParameterToString(expyear)); // form parameter
            localVarRequestOptions.FormParameters.Add("identifier", CityPayAPI.Client.ClientUtils.ParameterToString(identifier)); // form parameter
            if (matchAvsa != null)
            {
                localVarRequestOptions.FormParameters.Add("match_avsa", CityPayAPI.Client.ClientUtils.ParameterToString(matchAvsa)); // form parameter
            }
            if (nameOnCard != null)
            {
                localVarRequestOptions.FormParameters.Add("name_on_card", CityPayAPI.Client.ClientUtils.ParameterToString(nameOnCard)); // form parameter
            }
            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", CityPayAPI.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (redirectFailure != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_failure", CityPayAPI.Client.ClientUtils.ParameterToString(redirectFailure)); // form parameter
            }
            if (redirectSuccess != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_success", CityPayAPI.Client.ClientUtils.ParameterToString(redirectSuccess)); // form parameter
            }
            if (shipTo != null)
            {
                localVarRequestOptions.FormParameters.Add("ship_to", CityPayAPI.Client.ClientUtils.ParameterToString(shipTo)); // form parameter
            }
            if (threedsecure != null)
            {
                localVarRequestOptions.FormParameters.Add("threedsecure", CityPayAPI.Client.ClientUtils.ParameterToString(threedsecure)); // form parameter
            }
            if (transInfo != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_info", CityPayAPI.Client.ClientUtils.ParameterToString(transInfo)); // form parameter
            }
            if (transType != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_type", CityPayAPI.Client.ClientUtils.ParameterToString(transType)); // form parameter
            }

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/ direct/tokenise", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostTokeniseRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> DirectPostTokeniseRequestAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await DirectPostTokeniseRequestWithHttpInfoAsync(amount, cardnumber, expmonth, expyear, identifier, avsPostcodePolicy, billTo, csc, cscPolicy, currency, duplicatePolicy, matchAvsa, nameOnCard, nonce, redirectFailure, redirectSuccess, shipTo, threedsecure, transInfo, transType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Tokenise Request Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP Â£1,021.95 the amount value is 102195. </param>
        /// <param name="cardnumber">The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. </param>
        /// <param name="expmonth">The month of expiry of the card. The month value should be a numerical value between 1 and 12. </param>
        /// <param name="expyear">The year of expiry of the card. </param>
        /// <param name="identifier">The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. </param>
        /// <param name="avsPostcodePolicy">A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.  (optional)</param>
        /// <param name="billTo"> (optional)</param>
        /// <param name="csc">The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.  (optional)</param>
        /// <param name="cscPolicy">A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.  (optional)</param>
        /// <param name="currency">The processing currency for the transaction. Will default to the merchant account currency. (optional)</param>
        /// <param name="duplicatePolicy">A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   &#x60;2&#x60; to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   &#x60;3&#x60; to ignore. Transactions that are ignored will have the same affect as bypass.  (optional)</param>
        /// <param name="matchAvsa">A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   &#x60;2&#x60; to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   &#x60;3&#x60; to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.  (optional)</param>
        /// <param name="nameOnCard">The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.  (optional)</param>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="shipTo"> (optional)</param>
        /// <param name="threedsecure"> (optional)</param>
        /// <param name="transInfo">Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id. (optional)</param>
        /// <param name="transType">The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> DirectPostTokeniseRequestWithHttpInfoAsync(int amount, string cardnumber, int expmonth, int expyear, string identifier, string avsPostcodePolicy = default(string), ContactDetails billTo = default(ContactDetails), string csc = default(string), string cscPolicy = default(string), string currency = default(string), string duplicatePolicy = default(string), string matchAvsa = default(string), string nameOnCard = default(string), string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), ContactDetails shipTo = default(ContactDetails), ThreeDSecure threedsecure = default(ThreeDSecure), string transInfo = default(string), string transType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardnumber' is set
            if (cardnumber == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'cardnumber' when calling DirectPostAPIApi->DirectPostTokeniseRequest");

            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'identifier' when calling DirectPostAPIApi->DirectPostTokeniseRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("amount", CityPayAPI.Client.ClientUtils.ParameterToString(amount)); // form parameter
            if (avsPostcodePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("avs_postcode_policy", CityPayAPI.Client.ClientUtils.ParameterToString(avsPostcodePolicy)); // form parameter
            }
            if (billTo != null)
            {
                localVarRequestOptions.FormParameters.Add("bill_to", CityPayAPI.Client.ClientUtils.ParameterToString(billTo)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("cardnumber", CityPayAPI.Client.ClientUtils.ParameterToString(cardnumber)); // form parameter
            if (csc != null)
            {
                localVarRequestOptions.FormParameters.Add("csc", CityPayAPI.Client.ClientUtils.ParameterToString(csc)); // form parameter
            }
            if (cscPolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("csc_policy", CityPayAPI.Client.ClientUtils.ParameterToString(cscPolicy)); // form parameter
            }
            if (currency != null)
            {
                localVarRequestOptions.FormParameters.Add("currency", CityPayAPI.Client.ClientUtils.ParameterToString(currency)); // form parameter
            }
            if (duplicatePolicy != null)
            {
                localVarRequestOptions.FormParameters.Add("duplicate_policy", CityPayAPI.Client.ClientUtils.ParameterToString(duplicatePolicy)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("expmonth", CityPayAPI.Client.ClientUtils.ParameterToString(expmonth)); // form parameter
            localVarRequestOptions.FormParameters.Add("expyear", CityPayAPI.Client.ClientUtils.ParameterToString(expyear)); // form parameter
            localVarRequestOptions.FormParameters.Add("identifier", CityPayAPI.Client.ClientUtils.ParameterToString(identifier)); // form parameter
            if (matchAvsa != null)
            {
                localVarRequestOptions.FormParameters.Add("match_avsa", CityPayAPI.Client.ClientUtils.ParameterToString(matchAvsa)); // form parameter
            }
            if (nameOnCard != null)
            {
                localVarRequestOptions.FormParameters.Add("name_on_card", CityPayAPI.Client.ClientUtils.ParameterToString(nameOnCard)); // form parameter
            }
            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", CityPayAPI.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (redirectFailure != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_failure", CityPayAPI.Client.ClientUtils.ParameterToString(redirectFailure)); // form parameter
            }
            if (redirectSuccess != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_success", CityPayAPI.Client.ClientUtils.ParameterToString(redirectSuccess)); // form parameter
            }
            if (shipTo != null)
            {
                localVarRequestOptions.FormParameters.Add("ship_to", CityPayAPI.Client.ClientUtils.ParameterToString(shipTo)); // form parameter
            }
            if (threedsecure != null)
            {
                localVarRequestOptions.FormParameters.Add("threedsecure", CityPayAPI.Client.ClientUtils.ParameterToString(threedsecure)); // form parameter
            }
            if (transInfo != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_info", CityPayAPI.Client.ClientUtils.ParameterToString(transInfo)); // form parameter
            }
            if (transType != null)
            {
                localVarRequestOptions.FormParameters.Add("trans_type", CityPayAPI.Client.ClientUtils.ParameterToString(transType)); // form parameter
            }

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/ direct/tokenise", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectPostTokeniseRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <returns>AuthResponse</returns>
        public AuthResponse TokenRequest(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = TokenRequestWithHttpInfo(nonce, redirectFailure, redirectSuccess, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public CityPayAPI.Client.ApiResponse<AuthResponse> TokenRequestWithHttpInfo(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string))
        {
            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", CityPayAPI.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (redirectFailure != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_failure", CityPayAPI.Client.ClientUtils.ParameterToString(redirectFailure)); // form parameter
            }
            if (redirectSuccess != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_success", CityPayAPI.Client.ClientUtils.ParameterToString(redirectSuccess)); // form parameter
            }
            if (token != null)
            {
                localVarRequestOptions.FormParameters.Add("token", CityPayAPI.Client.ClientUtils.ParameterToString(token)); // form parameter
            }

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/direct/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> TokenRequestAsync(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<AuthResponse> localVarResponse = await TokenRequestWithHttpInfoAsync(nonce, redirectFailure, redirectSuccess, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Direct Post Token Request Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function.  (optional)</param>
        /// <param name="redirectFailure">The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.  (optional)</param>
        /// <param name="redirectSuccess">The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.  (optional)</param>
        /// <param name="token">The token required to process the transaction as presented by the direct post methodology.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthResponse>> TokenRequestWithHttpInfoAsync(string nonce = default(string), string redirectFailure = default(string), string redirectSuccess = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "application/x-www-form-urlencoded",
                "text/xml"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", CityPayAPI.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (redirectFailure != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_failure", CityPayAPI.Client.ClientUtils.ParameterToString(redirectFailure)); // form parameter
            }
            if (redirectSuccess != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_success", CityPayAPI.Client.ClientUtils.ParameterToString(redirectSuccess)); // form parameter
            }
            if (token != null)
            {
                localVarRequestOptions.FormParameters.Add("token", CityPayAPI.Client.ClientUtils.ParameterToString(token)); // form parameter
            }

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }
            // authentication (cp-domain-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-domain-key")))
            {
                localVarRequestOptions.QueryParameters.Add(CityPayAPI.Client.ClientUtils.ParameterToMultiMap("", "cp-domain-key", this.Configuration.GetApiKeyWithPrefix("cp-domain-key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/direct/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TokenRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
