/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkTokenCreated
    /// </summary>
    [DataContract(Name = "PaylinkTokenCreated")]
    public partial class PaylinkTokenCreated : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkTokenCreated" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaylinkTokenCreated() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkTokenCreated" /> class.
        /// </summary>
        /// <param name="attachments">attachments.</param>
        /// <param name="bps">true if BPS has been enabled on this token..</param>
        /// <param name="dateCreated">Date and time the token was generated..</param>
        /// <param name="errors">errors.</param>
        /// <param name="id">A unique id of the request. (required).</param>
        /// <param name="identifier">The identifier as presented in the TokenRequest..</param>
        /// <param name="mode">Determines whether the token is &#x60;live&#x60; or &#x60;test&#x60;..</param>
        /// <param name="qrCode">A URL of a qrcode which can be used to refer to the token URL..</param>
        /// <param name="result">The result field contains the result for the Paylink Token Request. 0 - indicates that an error was encountered while creating the token. 1 - which indicates that a Token was successfully created. (required).</param>
        /// <param name="serverVersion">the version of the server performing the call..</param>
        /// <param name="source">The incoming IP address of the call..</param>
        /// <param name="token">A token generated for the request used to refer to the transaction in consequential calls. (required).</param>
        /// <param name="url">The Paylink token URL used to checkout by the card holder..</param>
        /// <param name="usc">A UrlShortCode (USC) used for short links..</param>
        public PaylinkTokenCreated(PaylinkAttachmentResult attachments = default(PaylinkAttachmentResult), string bps = default(string), DateTime dateCreated = default(DateTime), List<PaylinkErrorCode> errors = default(List<PaylinkErrorCode>), string id = default(string), string identifier = default(string), string mode = default(string), string qrCode = default(string), int result = default(int), string serverVersion = default(string), string source = default(string), string token = default(string), string url = default(string), string usc = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PaylinkTokenCreated and cannot be null");
            }
            this.Id = id;
            this.Result = result;
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new ArgumentNullException("token is a required property for PaylinkTokenCreated and cannot be null");
            }
            this.Token = token;
            this.Attachments = attachments;
            this.Bps = bps;
            this.DateCreated = dateCreated;
            this.Errors = errors;
            this.Identifier = identifier;
            this.Mode = mode;
            this.QrCode = qrCode;
            this.ServerVersion = serverVersion;
            this.Source = source;
            this.Url = url;
            this.Usc = usc;
        }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public PaylinkAttachmentResult Attachments { get; set; }

        /// <summary>
        /// true if BPS has been enabled on this token.
        /// </summary>
        /// <value>true if BPS has been enabled on this token.</value>
        [DataMember(Name = "bps", EmitDefaultValue = false)]
        public string Bps { get; set; }

        /// <summary>
        /// Date and time the token was generated.
        /// </summary>
        /// <value>Date and time the token was generated.</value>
        [DataMember(Name = "date_created", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<PaylinkErrorCode> Errors { get; set; }

        /// <summary>
        /// A unique id of the request.
        /// </summary>
        /// <value>A unique id of the request.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier as presented in the TokenRequest.
        /// </summary>
        /// <value>The identifier as presented in the TokenRequest.</value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Determines whether the token is &#x60;live&#x60; or &#x60;test&#x60;.
        /// </summary>
        /// <value>Determines whether the token is &#x60;live&#x60; or &#x60;test&#x60;.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public string Mode { get; set; }

        /// <summary>
        /// A URL of a qrcode which can be used to refer to the token URL.
        /// </summary>
        /// <value>A URL of a qrcode which can be used to refer to the token URL.</value>
        [DataMember(Name = "qr_code", EmitDefaultValue = false)]
        public string QrCode { get; set; }

        /// <summary>
        /// The result field contains the result for the Paylink Token Request. 0 - indicates that an error was encountered while creating the token. 1 - which indicates that a Token was successfully created.
        /// </summary>
        /// <value>The result field contains the result for the Paylink Token Request. 0 - indicates that an error was encountered while creating the token. 1 - which indicates that a Token was successfully created.</value>
        [DataMember(Name = "result", IsRequired = true, EmitDefaultValue = true)]
        public int Result { get; set; }

        /// <summary>
        /// the version of the server performing the call.
        /// </summary>
        /// <value>the version of the server performing the call.</value>
        [DataMember(Name = "server_version", EmitDefaultValue = false)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// The incoming IP address of the call.
        /// </summary>
        /// <value>The incoming IP address of the call.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// A token generated for the request used to refer to the transaction in consequential calls.
        /// </summary>
        /// <value>A token generated for the request used to refer to the transaction in consequential calls.</value>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// The Paylink token URL used to checkout by the card holder.
        /// </summary>
        /// <value>The Paylink token URL used to checkout by the card holder.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// A UrlShortCode (USC) used for short links.
        /// </summary>
        /// <value>A UrlShortCode (USC) used for short links.</value>
        [DataMember(Name = "usc", EmitDefaultValue = false)]
        public string Usc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkTokenCreated {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Bps: ").Append(Bps).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Usc: ").Append(Usc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
