/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// TokenStatus
    /// </summary>
    [DataContract(Name = "TokenStatus")]
    public partial class TokenStatus : IEquatable<TokenStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenStatus" /> class.
        /// </summary>
        /// <param name="amountPaid">the amount that has been paid against the session..</param>
        /// <param name="authCode">an authorisation code if the transaction was processed and isPaid is true..</param>
        /// <param name="card">a description of the card that was used for payment if paid..</param>
        /// <param name="created">the date and time that the session was created..</param>
        /// <param name="datetime">the date and time of the current status..</param>
        /// <param name="identifier">the merchant identifier, to help identifying the token..</param>
        /// <param name="isAccessGuarded">true if the session was protected using field guards..</param>
        /// <param name="isAttachment">true if an attachment exists..</param>
        /// <param name="isCancelled">true if the session was cancelled either by the user or by a system request..</param>
        /// <param name="isEmailSent">true if an email was sent..</param>
        /// <param name="isExpired">true if the session has expired..</param>
        /// <param name="isFormViewed">true if the form was ever displayed to the addressee..</param>
        /// <param name="isOpenForPayment">true if the session is still open for payment or false if it has been closed..</param>
        /// <param name="isPaid">whether the session has been paid and therefore can be considered as complete..</param>
        /// <param name="isPaymentAttempted">true if payment has been attempted..</param>
        /// <param name="isPostbackOk">true if a post back was executed successfully..</param>
        /// <param name="isSMSSent">true if an SMS was sent..</param>
        /// <param name="isValidated">whether the token generation was successfully validated..</param>
        /// <param name="lastEventDateTime">the date and time that the session last had an event actioned against it..</param>
        /// <param name="lastPaymentResult">the result of the last payment if one exists..</param>
        /// <param name="mid">identifies the merchant account..</param>
        /// <param name="stateHistory">stateHistory.</param>
        /// <param name="token">the token value which uniquely identifies the session..</param>
        /// <param name="transNo">a transNo if the transacstion was processed and isPaid is true..</param>
        /// <param name="url">the url to present to the user for processing of a transaction..</param>
        /// <param name="urlShortCode">a short code (if enabled for the processing of the transaction)..</param>
        public TokenStatus(ModelInt amountPaid = default(ModelInt), string authCode = default(string), string card = default(string), DateTime created = default(DateTime), DateTime datetime = default(DateTime), string identifier = default(string), bool isAccessGuarded = default(bool), bool isAttachment = default(bool), bool isCancelled = default(bool), bool isEmailSent = default(bool), bool isExpired = default(bool), bool isFormViewed = default(bool), bool isOpenForPayment = default(bool), bool isPaid = default(bool), bool isPaymentAttempted = default(bool), bool isPostbackOk = default(bool), bool isSMSSent = default(bool), bool isValidated = default(bool), DateTime lastEventDateTime = default(DateTime), string lastPaymentResult = default(string), string mid = default(string), List<StateEvent> stateHistory = default(List<StateEvent>), string token = default(string), ModelInt transNo = default(ModelInt), string url = default(string), string urlShortCode = default(string))
        {
            this.AmountPaid = amountPaid;
            this.AuthCode = authCode;
            this.Card = card;
            this.Created = created;
            this.Datetime = datetime;
            this.Identifier = identifier;
            this.IsAccessGuarded = isAccessGuarded;
            this.IsAttachment = isAttachment;
            this.IsCancelled = isCancelled;
            this.IsEmailSent = isEmailSent;
            this.IsExpired = isExpired;
            this.IsFormViewed = isFormViewed;
            this.IsOpenForPayment = isOpenForPayment;
            this.IsPaid = isPaid;
            this.IsPaymentAttempted = isPaymentAttempted;
            this.IsPostbackOk = isPostbackOk;
            this.IsSMSSent = isSMSSent;
            this.IsValidated = isValidated;
            this.LastEventDateTime = lastEventDateTime;
            this.LastPaymentResult = lastPaymentResult;
            this.Mid = mid;
            this.StateHistory = stateHistory;
            this.Token = token;
            this.TransNo = transNo;
            this.Url = url;
            this.UrlShortCode = urlShortCode;
        }

        /// <summary>
        /// the amount that has been paid against the session.
        /// </summary>
        /// <value>the amount that has been paid against the session.</value>
        [DataMember(Name = "amountPaid", EmitDefaultValue = false)]
        public ModelInt AmountPaid { get; set; }

        /// <summary>
        /// an authorisation code if the transaction was processed and isPaid is true.
        /// </summary>
        /// <value>an authorisation code if the transaction was processed and isPaid is true.</value>
        [DataMember(Name = "authCode", EmitDefaultValue = false)]
        public string AuthCode { get; set; }

        /// <summary>
        /// a description of the card that was used for payment if paid.
        /// </summary>
        /// <value>a description of the card that was used for payment if paid.</value>
        [DataMember(Name = "card", EmitDefaultValue = false)]
        public string Card { get; set; }

        /// <summary>
        /// the date and time that the session was created.
        /// </summary>
        /// <value>the date and time that the session was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the date and time of the current status.
        /// </summary>
        /// <value>the date and time of the current status.</value>
        [DataMember(Name = "datetime", EmitDefaultValue = false)]
        public DateTime Datetime { get; set; }

        /// <summary>
        /// the merchant identifier, to help identifying the token.
        /// </summary>
        /// <value>the merchant identifier, to help identifying the token.</value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// true if the session was protected using field guards.
        /// </summary>
        /// <value>true if the session was protected using field guards.</value>
        [DataMember(Name = "isAccessGuarded", EmitDefaultValue = true)]
        public bool IsAccessGuarded { get; set; }

        /// <summary>
        /// true if an attachment exists.
        /// </summary>
        /// <value>true if an attachment exists.</value>
        [DataMember(Name = "isAttachment", EmitDefaultValue = true)]
        public bool IsAttachment { get; set; }

        /// <summary>
        /// true if the session was cancelled either by the user or by a system request.
        /// </summary>
        /// <value>true if the session was cancelled either by the user or by a system request.</value>
        [DataMember(Name = "isCancelled", EmitDefaultValue = true)]
        public bool IsCancelled { get; set; }

        /// <summary>
        /// true if an email was sent.
        /// </summary>
        /// <value>true if an email was sent.</value>
        [DataMember(Name = "isEmailSent", EmitDefaultValue = true)]
        public bool IsEmailSent { get; set; }

        /// <summary>
        /// true if the session has expired.
        /// </summary>
        /// <value>true if the session has expired.</value>
        [DataMember(Name = "isExpired", EmitDefaultValue = true)]
        public bool IsExpired { get; set; }

        /// <summary>
        /// true if the form was ever displayed to the addressee.
        /// </summary>
        /// <value>true if the form was ever displayed to the addressee.</value>
        [DataMember(Name = "isFormViewed", EmitDefaultValue = true)]
        public bool IsFormViewed { get; set; }

        /// <summary>
        /// true if the session is still open for payment or false if it has been closed.
        /// </summary>
        /// <value>true if the session is still open for payment or false if it has been closed.</value>
        [DataMember(Name = "isOpenForPayment", EmitDefaultValue = true)]
        public bool IsOpenForPayment { get; set; }

        /// <summary>
        /// whether the session has been paid and therefore can be considered as complete.
        /// </summary>
        /// <value>whether the session has been paid and therefore can be considered as complete.</value>
        [DataMember(Name = "isPaid", EmitDefaultValue = true)]
        public bool IsPaid { get; set; }

        /// <summary>
        /// true if payment has been attempted.
        /// </summary>
        /// <value>true if payment has been attempted.</value>
        [DataMember(Name = "isPaymentAttempted", EmitDefaultValue = true)]
        public bool IsPaymentAttempted { get; set; }

        /// <summary>
        /// true if a post back was executed successfully.
        /// </summary>
        /// <value>true if a post back was executed successfully.</value>
        [DataMember(Name = "isPostbackOk", EmitDefaultValue = true)]
        public bool IsPostbackOk { get; set; }

        /// <summary>
        /// true if an SMS was sent.
        /// </summary>
        /// <value>true if an SMS was sent.</value>
        [DataMember(Name = "isSMSSent", EmitDefaultValue = true)]
        public bool IsSMSSent { get; set; }

        /// <summary>
        /// whether the token generation was successfully validated.
        /// </summary>
        /// <value>whether the token generation was successfully validated.</value>
        [DataMember(Name = "isValidated", EmitDefaultValue = true)]
        public bool IsValidated { get; set; }

        /// <summary>
        /// the date and time that the session last had an event actioned against it.
        /// </summary>
        /// <value>the date and time that the session last had an event actioned against it.</value>
        [DataMember(Name = "lastEventDateTime", EmitDefaultValue = false)]
        public DateTime LastEventDateTime { get; set; }

        /// <summary>
        /// the result of the last payment if one exists.
        /// </summary>
        /// <value>the result of the last payment if one exists.</value>
        [DataMember(Name = "lastPaymentResult", EmitDefaultValue = false)]
        public string LastPaymentResult { get; set; }

        /// <summary>
        /// identifies the merchant account.
        /// </summary>
        /// <value>identifies the merchant account.</value>
        [DataMember(Name = "mid", EmitDefaultValue = false)]
        public string Mid { get; set; }

        /// <summary>
        /// Gets or Sets StateHistory
        /// </summary>
        [DataMember(Name = "stateHistory", EmitDefaultValue = false)]
        public List<StateEvent> StateHistory { get; set; }

        /// <summary>
        /// the token value which uniquely identifies the session.
        /// </summary>
        /// <value>the token value which uniquely identifies the session.</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// a transNo if the transacstion was processed and isPaid is true.
        /// </summary>
        /// <value>a transNo if the transacstion was processed and isPaid is true.</value>
        [DataMember(Name = "transNo", EmitDefaultValue = false)]
        public ModelInt TransNo { get; set; }

        /// <summary>
        /// the url to present to the user for processing of a transaction.
        /// </summary>
        /// <value>the url to present to the user for processing of a transaction.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// a short code (if enabled for the processing of the transaction).
        /// </summary>
        /// <value>a short code (if enabled for the processing of the transaction).</value>
        [DataMember(Name = "url_short_code", EmitDefaultValue = false)]
        public string UrlShortCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenStatus {\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  IsAccessGuarded: ").Append(IsAccessGuarded).Append("\n");
            sb.Append("  IsAttachment: ").Append(IsAttachment).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsEmailSent: ").Append(IsEmailSent).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  IsFormViewed: ").Append(IsFormViewed).Append("\n");
            sb.Append("  IsOpenForPayment: ").Append(IsOpenForPayment).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("  IsPaymentAttempted: ").Append(IsPaymentAttempted).Append("\n");
            sb.Append("  IsPostbackOk: ").Append(IsPostbackOk).Append("\n");
            sb.Append("  IsSMSSent: ").Append(IsSMSSent).Append("\n");
            sb.Append("  IsValidated: ").Append(IsValidated).Append("\n");
            sb.Append("  LastEventDateTime: ").Append(LastEventDateTime).Append("\n");
            sb.Append("  LastPaymentResult: ").Append(LastPaymentResult).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  StateHistory: ").Append(StateHistory).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TransNo: ").Append(TransNo).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlShortCode: ").Append(UrlShortCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenStatus);
        }

        /// <summary>
        /// Returns true if TokenStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountPaid == input.AmountPaid ||
                    (this.AmountPaid != null &&
                    this.AmountPaid.Equals(input.AmountPaid))
                ) && 
                (
                    this.AuthCode == input.AuthCode ||
                    (this.AuthCode != null &&
                    this.AuthCode.Equals(input.AuthCode))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Datetime == input.Datetime ||
                    (this.Datetime != null &&
                    this.Datetime.Equals(input.Datetime))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.IsAccessGuarded == input.IsAccessGuarded ||
                    this.IsAccessGuarded.Equals(input.IsAccessGuarded)
                ) && 
                (
                    this.IsAttachment == input.IsAttachment ||
                    this.IsAttachment.Equals(input.IsAttachment)
                ) && 
                (
                    this.IsCancelled == input.IsCancelled ||
                    this.IsCancelled.Equals(input.IsCancelled)
                ) && 
                (
                    this.IsEmailSent == input.IsEmailSent ||
                    this.IsEmailSent.Equals(input.IsEmailSent)
                ) && 
                (
                    this.IsExpired == input.IsExpired ||
                    this.IsExpired.Equals(input.IsExpired)
                ) && 
                (
                    this.IsFormViewed == input.IsFormViewed ||
                    this.IsFormViewed.Equals(input.IsFormViewed)
                ) && 
                (
                    this.IsOpenForPayment == input.IsOpenForPayment ||
                    this.IsOpenForPayment.Equals(input.IsOpenForPayment)
                ) && 
                (
                    this.IsPaid == input.IsPaid ||
                    this.IsPaid.Equals(input.IsPaid)
                ) && 
                (
                    this.IsPaymentAttempted == input.IsPaymentAttempted ||
                    this.IsPaymentAttempted.Equals(input.IsPaymentAttempted)
                ) && 
                (
                    this.IsPostbackOk == input.IsPostbackOk ||
                    this.IsPostbackOk.Equals(input.IsPostbackOk)
                ) && 
                (
                    this.IsSMSSent == input.IsSMSSent ||
                    this.IsSMSSent.Equals(input.IsSMSSent)
                ) && 
                (
                    this.IsValidated == input.IsValidated ||
                    this.IsValidated.Equals(input.IsValidated)
                ) && 
                (
                    this.LastEventDateTime == input.LastEventDateTime ||
                    (this.LastEventDateTime != null &&
                    this.LastEventDateTime.Equals(input.LastEventDateTime))
                ) && 
                (
                    this.LastPaymentResult == input.LastPaymentResult ||
                    (this.LastPaymentResult != null &&
                    this.LastPaymentResult.Equals(input.LastPaymentResult))
                ) && 
                (
                    this.Mid == input.Mid ||
                    (this.Mid != null &&
                    this.Mid.Equals(input.Mid))
                ) && 
                (
                    this.StateHistory == input.StateHistory ||
                    this.StateHistory != null &&
                    input.StateHistory != null &&
                    this.StateHistory.SequenceEqual(input.StateHistory)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TransNo == input.TransNo ||
                    (this.TransNo != null &&
                    this.TransNo.Equals(input.TransNo))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UrlShortCode == input.UrlShortCode ||
                    (this.UrlShortCode != null &&
                    this.UrlShortCode.Equals(input.UrlShortCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountPaid != null)
                    hashCode = hashCode * 59 + this.AmountPaid.GetHashCode();
                if (this.AuthCode != null)
                    hashCode = hashCode * 59 + this.AuthCode.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Datetime != null)
                    hashCode = hashCode * 59 + this.Datetime.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                hashCode = hashCode * 59 + this.IsAccessGuarded.GetHashCode();
                hashCode = hashCode * 59 + this.IsAttachment.GetHashCode();
                hashCode = hashCode * 59 + this.IsCancelled.GetHashCode();
                hashCode = hashCode * 59 + this.IsEmailSent.GetHashCode();
                hashCode = hashCode * 59 + this.IsExpired.GetHashCode();
                hashCode = hashCode * 59 + this.IsFormViewed.GetHashCode();
                hashCode = hashCode * 59 + this.IsOpenForPayment.GetHashCode();
                hashCode = hashCode * 59 + this.IsPaid.GetHashCode();
                hashCode = hashCode * 59 + this.IsPaymentAttempted.GetHashCode();
                hashCode = hashCode * 59 + this.IsPostbackOk.GetHashCode();
                hashCode = hashCode * 59 + this.IsSMSSent.GetHashCode();
                hashCode = hashCode * 59 + this.IsValidated.GetHashCode();
                if (this.LastEventDateTime != null)
                    hashCode = hashCode * 59 + this.LastEventDateTime.GetHashCode();
                if (this.LastPaymentResult != null)
                    hashCode = hashCode * 59 + this.LastPaymentResult.GetHashCode();
                if (this.Mid != null)
                    hashCode = hashCode * 59 + this.Mid.GetHashCode();
                if (this.StateHistory != null)
                    hashCode = hashCode * 59 + this.StateHistory.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.TransNo != null)
                    hashCode = hashCode * 59 + this.TransNo.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.UrlShortCode != null)
                    hashCode = hashCode * 59 + this.UrlShortCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
