/*
 * CityPay Payment API
 *
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CityPayAPI.Client.OpenAPIDateConverter;

namespace CityPayAPI.Model
{
    /// <summary>
    /// PaylinkCustomParam
    /// </summary>
    [DataContract(Name = "PaylinkCustomParam")]
    public partial class PaylinkCustomParam : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkCustomParam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaylinkCustomParam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaylinkCustomParam" /> class.
        /// </summary>
        /// <param name="entryMode">The type of entry mode. A value of &#39;pre&#39; will pre-render the custom parameter before the payment screen. Any other value will result in the custom parameter being displayed on the payment screen..</param>
        /// <param name="fieldType">the type of html5 field, defaults to &#39;text&#39;. Other options are &#39;dob&#39; for a date of birth series of select list entry..</param>
        /// <param name="group">a group the parameter is linked with, allows for grouping with a title..</param>
        /// <param name="label">a label to show alongside the input..</param>
        /// <param name="locked">whether the parameter is locked from entry..</param>
        /// <param name="name">the name of the custom parameter used to converse with the submitter. (required).</param>
        /// <param name="order">an index order for the parameter..</param>
        /// <param name="pattern">a regex pattern to validate the custom parameter with..</param>
        /// <param name="placeholder">a placehold value to display in the input..</param>
        /// <param name="required">whether the field is required..</param>
        /// <param name="value">a default value for the field..</param>
        public PaylinkCustomParam(string entryMode = default(string), string fieldType = default(string), string group = default(string), string label = default(string), bool locked = default(bool), string name = default(string), int order = default(int), string pattern = default(string), string placeholder = default(string), bool required = default(bool), string value = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PaylinkCustomParam and cannot be null");
            }
            this.Name = name;
            this.EntryMode = entryMode;
            this.FieldType = fieldType;
            this.Group = group;
            this.Label = label;
            this.Locked = locked;
            this.Order = order;
            this.Pattern = pattern;
            this.Placeholder = placeholder;
            this.Required = required;
            this.Value = value;
        }

        /// <summary>
        /// The type of entry mode. A value of &#39;pre&#39; will pre-render the custom parameter before the payment screen. Any other value will result in the custom parameter being displayed on the payment screen.
        /// </summary>
        /// <value>The type of entry mode. A value of &#39;pre&#39; will pre-render the custom parameter before the payment screen. Any other value will result in the custom parameter being displayed on the payment screen.</value>
        [DataMember(Name = "entry_mode", EmitDefaultValue = false)]
        public string EntryMode { get; set; }

        /// <summary>
        /// the type of html5 field, defaults to &#39;text&#39;. Other options are &#39;dob&#39; for a date of birth series of select list entry.
        /// </summary>
        /// <value>the type of html5 field, defaults to &#39;text&#39;. Other options are &#39;dob&#39; for a date of birth series of select list entry.</value>
        [DataMember(Name = "field_type", EmitDefaultValue = false)]
        public string FieldType { get; set; }

        /// <summary>
        /// a group the parameter is linked with, allows for grouping with a title.
        /// </summary>
        /// <value>a group the parameter is linked with, allows for grouping with a title.</value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// a label to show alongside the input.
        /// </summary>
        /// <value>a label to show alongside the input.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// whether the parameter is locked from entry.
        /// </summary>
        /// <value>whether the parameter is locked from entry.</value>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// the name of the custom parameter used to converse with the submitter.
        /// </summary>
        /// <value>the name of the custom parameter used to converse with the submitter.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// an index order for the parameter.
        /// </summary>
        /// <value>an index order for the parameter.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// a regex pattern to validate the custom parameter with.
        /// </summary>
        /// <value>a regex pattern to validate the custom parameter with.</value>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        public string Pattern { get; set; }

        /// <summary>
        /// a placehold value to display in the input.
        /// </summary>
        /// <value>a placehold value to display in the input.</value>
        [DataMember(Name = "placeholder", EmitDefaultValue = false)]
        public string Placeholder { get; set; }

        /// <summary>
        /// whether the field is required.
        /// </summary>
        /// <value>whether the field is required.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// a default value for the field.
        /// </summary>
        /// <value>a default value for the field.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaylinkCustomParam {\n");
            sb.Append("  EntryMode: ").Append(EntryMode).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
