/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using CityPayAPI.Api;
using CityPayAPI.Model;
using CityPayAPI.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace CityPayAPI.Test
{
    /// <summary>
    ///  Class for testing AuthResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AuthResponseTests : IDisposable
    {
        private AuthResponse instance;
        private AuthResponse instanceNoIdent;

        public AuthResponseTests()
        {
            string json = @"
                {
                  ""amount"": 5500,
                    ""atrn"": ""atrn1"",
                    ""atsd"": ""a"",
                    ""authcode"": ""12345"",
                    ""authen_result"": ""R"",
                    ""authorised"": true,
                    ""avs_result"": ""G"",
                    ""bin_commercial"": false,
                    ""bin_debit"": false,
                    ""bin_description"": ""bin_desc"",
                    ""cavv"": ""cavvvvvvvvvvvvv"",
                    ""context"": ""20200812075906AAAGV4"",
                    ""csc_result"": ""C"",
                    ""currency"": ""GBP"",
                    ""datetime"": ""2020-08-12T07:59:11Z"",
                    ""eci"": ""0"",
                    ""identifier"": ""ident1"",
                    ""live"": true,
                    ""maskedpan"": ""400000******0002"",
                    ""merchantid"": 12345,
                    ""result"": 1,
                    ""result_code"": ""000"",
                    ""result_message"": ""System: Accepted Transaction"",
                    ""scheme"": ""VISA_BUSINESS"",
                    ""sha256"": ""abcdefg"",
                    ""trans_status"": ""P"",
                    ""transno"": 74875
                }";
            
            instance = (AuthResponse)JsonConvert.DeserializeObject(json, typeof(AuthResponse));
            
            string jsonNoIdent = @"
                {
                  ""amount"": 0,
                    ""atrn"": """",
                    ""atsd"": """",
                    ""authcode"": """",
                    ""authen_result"": """",
                    ""authorised"": false,
                    ""avs_result"": "" "",
                    ""bin_commercial"": false,
                    ""bin_debit"": false,
                    ""bin_description"": """",
                    ""cavv"": """",
                    ""context"": ""PC.0.A5298ef695b"",
                    ""csc_result"": "" "",
                    ""currency"": ""___"",
                    ""datetime"": ""2020-08-12T07:59:11Z"",
                    ""eci"": ""0"",
                    ""identifier"": """",
                    ""live"": true,
                    ""maskedpan"": ""N/A"",
                    ""merchantid"": 0,
                    ""result"": 3,
                    ""result_code"": ""P030"",
                    ""result_message"": ""Request Error: Authorisation invalid (203: Data element not in the required format or value is invalid as defined in Table A.1. threeDSSessionData)"",
                    ""scheme"": """",
                    ""sha256"": """",
                    ""trans_status"": ""_"",
                    ""transno"": -1
                }";
            
            instanceNoIdent = (AuthResponse)JsonConvert.DeserializeObject(jsonNoIdent, typeof(AuthResponse));
        }

        public void Dispose()
        {
        }

        /// <summary>
        /// Test an instance of AuthResponse
        /// </summary>
        [Fact]
        public void AuthResponseInstanceTest()
        {
            Assert.IsType<AuthResponse>(instance);
        }


        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Fact]
        public void AuthResponse()
        {
            Assert.Equal(5500, instance.Amount);
            Assert.Equal("atrn1", instance.Atrn);
            Assert.Equal("a", instance.Atsd);
            Assert.Equal("12345", instance.Authcode);
            Assert.Equal("R", instance.AuthenResult);
            Assert.True(instance.Authorised);
            Assert.Equal("G", instance.AvsResult);
            Assert.False(instance.BinCommercial);
            Assert.False(instance.BinDebit);
            Assert.Equal("bin_desc", instance.BinDescription);
            Assert.Equal("cavvvvvvvvvvvvv", instance.Cavv);
            Assert.Equal("20200812075906AAAGV4", instance.Context);
            Assert.Equal("C", instance.CscResult);
            Assert.Equal("GBP", instance.Currency);
            Assert.Equal("2020-08-12T07:59:11", instance.Datetime.ToString("yyyy-MM-ddTHH:mm:ss"));
            Assert.Equal("0", instance.Eci);
            Assert.Equal("ident1", instance.Identifier);
            Assert.True(instance.Live);
            Assert.Equal("400000******0002", instance.Maskedpan);
            Assert.Equal(12345, instance.Merchantid);
            Assert.Equal(1, instance.Result);
            Assert.Equal(3, instanceNoIdent.Result);
            Assert.Equal("000", instance.ResultCode);
            Assert.Equal("P030", instanceNoIdent.ResultCode);
            Assert.Equal("System: Accepted Transaction", instance.ResultMessage);
            Assert.Equal("VISA_BUSINESS", instance.Scheme);
            Assert.Equal("abcdefg", instance.Sha256);
            Assert.Equal("P", instance.TransStatus);
            Assert.Equal(74875, instance.Transno);
        }
    }
}