/*
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CityPayAPI.Client;
using CityPayAPI.Model;

namespace CityPayAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchProcessingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch Process Request
        /// </summary>
        /// <remarks>
        /// A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <returns>ProcessBatchResponse</returns>
        ProcessBatchResponse BatchProcessRequest(ProcessBatchRequest processBatchRequest);

        /// <summary>
        /// Batch Process Request
        /// </summary>
        /// <remarks>
        /// A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <returns>ApiResponse of ProcessBatchResponse</returns>
        ApiResponse<ProcessBatchResponse> BatchProcessRequestWithHttpInfo(ProcessBatchRequest processBatchRequest);
        /// <summary>
        /// BatchReportRequest
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve a report of the result of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <returns>BatchReportResponseModel</returns>
        BatchReportResponseModel BatchReportRequest(BatchReportRequest batchReportRequest);

        /// <summary>
        /// BatchReportRequest
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve a report of the result of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <returns>ApiResponse of BatchReportResponseModel</returns>
        ApiResponse<BatchReportResponseModel> BatchReportRequestWithHttpInfo(BatchReportRequest batchReportRequest);
        /// <summary>
        /// CheckBatchStatus
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve the status of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <returns>CheckBatchStatusResponse</returns>
        CheckBatchStatusResponse CheckBatchStatusRequest(CheckBatchStatus checkBatchStatus);

        /// <summary>
        /// CheckBatchStatus
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve the status of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <returns>ApiResponse of CheckBatchStatusResponse</returns>
        ApiResponse<CheckBatchStatusResponse> CheckBatchStatusRequestWithHttpInfo(CheckBatchStatus checkBatchStatus);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchProcessingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch Process Request
        /// </summary>
        /// <remarks>
        /// A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessBatchResponse</returns>
        System.Threading.Tasks.Task<ProcessBatchResponse> BatchProcessRequestAsync(ProcessBatchRequest processBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch Process Request
        /// </summary>
        /// <remarks>
        /// A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessBatchResponse>> BatchProcessRequestWithHttpInfoAsync(ProcessBatchRequest processBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BatchReportRequest
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve a report of the result of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchReportResponseModel</returns>
        System.Threading.Tasks.Task<BatchReportResponseModel> BatchReportRequestAsync(BatchReportRequest batchReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BatchReportRequest
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve a report of the result of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchReportResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchReportResponseModel>> BatchReportRequestWithHttpInfoAsync(BatchReportRequest batchReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// CheckBatchStatus
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve the status of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckBatchStatusResponse</returns>
        System.Threading.Tasks.Task<CheckBatchStatusResponse> CheckBatchStatusRequestAsync(CheckBatchStatus checkBatchStatus, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// CheckBatchStatus
        /// </summary>
        /// <remarks>
        /// The operation is used to retrieve the status of a batch process.
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckBatchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckBatchStatusResponse>> CheckBatchStatusRequestWithHttpInfoAsync(CheckBatchStatus checkBatchStatus, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchProcessingApi : IBatchProcessingApiSync, IBatchProcessingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchProcessingApi : IBatchProcessingApi
    {
        private CityPayAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchProcessingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchProcessingApi(string basePath)
        {
            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                new CityPayAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchProcessingApi(CityPayAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchProcessingApi(CityPayAPI.Client.ISynchronousClient client, CityPayAPI.Client.IAsynchronousClient asyncClient, CityPayAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CityPayAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CityPayAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CityPayAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPayAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch Process Request A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <returns>ProcessBatchResponse</returns>
        public ProcessBatchResponse BatchProcessRequest(ProcessBatchRequest processBatchRequest)
        {
            CityPayAPI.Client.ApiResponse<ProcessBatchResponse> localVarResponse = BatchProcessRequestWithHttpInfo(processBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Process Request A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <returns>ApiResponse of ProcessBatchResponse</returns>
        public CityPayAPI.Client.ApiResponse<ProcessBatchResponse> BatchProcessRequestWithHttpInfo(ProcessBatchRequest processBatchRequest)
        {
            // verify the required parameter 'processBatchRequest' is set
            if (processBatchRequest == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'processBatchRequest' when calling BatchProcessingApi->BatchProcessRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = processBatchRequest;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessBatchResponse>("/v6/batch/process", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchProcessRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Process Request A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessBatchResponse</returns>
        public async System.Threading.Tasks.Task<ProcessBatchResponse> BatchProcessRequestAsync(ProcessBatchRequest processBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<ProcessBatchResponse> localVarResponse = await BatchProcessRequestWithHttpInfoAsync(processBatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Process Request A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessBatchResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<ProcessBatchResponse>> BatchProcessRequestWithHttpInfoAsync(ProcessBatchRequest processBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processBatchRequest' is set
            if (processBatchRequest == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'processBatchRequest' when calling BatchProcessingApi->BatchProcessRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = processBatchRequest;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessBatchResponse>("/v6/batch/process", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchProcessRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// BatchReportRequest The operation is used to retrieve a report of the result of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <returns>BatchReportResponseModel</returns>
        public BatchReportResponseModel BatchReportRequest(BatchReportRequest batchReportRequest)
        {
            CityPayAPI.Client.ApiResponse<BatchReportResponseModel> localVarResponse = BatchReportRequestWithHttpInfo(batchReportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BatchReportRequest The operation is used to retrieve a report of the result of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <returns>ApiResponse of BatchReportResponseModel</returns>
        public CityPayAPI.Client.ApiResponse<BatchReportResponseModel> BatchReportRequestWithHttpInfo(BatchReportRequest batchReportRequest)
        {
            // verify the required parameter 'batchReportRequest' is set
            if (batchReportRequest == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'batchReportRequest' when calling BatchProcessingApi->BatchReportRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = batchReportRequest;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchReportResponseModel>("/v6/batch/retrieve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchReportRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// BatchReportRequest The operation is used to retrieve a report of the result of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchReportResponseModel</returns>
        public async System.Threading.Tasks.Task<BatchReportResponseModel> BatchReportRequestAsync(BatchReportRequest batchReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<BatchReportResponseModel> localVarResponse = await BatchReportRequestWithHttpInfoAsync(batchReportRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BatchReportRequest The operation is used to retrieve a report of the result of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchReportResponseModel)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<BatchReportResponseModel>> BatchReportRequestWithHttpInfoAsync(BatchReportRequest batchReportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReportRequest' is set
            if (batchReportRequest == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'batchReportRequest' when calling BatchProcessingApi->BatchReportRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = batchReportRequest;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchReportResponseModel>("/v6/batch/retrieve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchReportRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CheckBatchStatus The operation is used to retrieve the status of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <returns>CheckBatchStatusResponse</returns>
        public CheckBatchStatusResponse CheckBatchStatusRequest(CheckBatchStatus checkBatchStatus)
        {
            CityPayAPI.Client.ApiResponse<CheckBatchStatusResponse> localVarResponse = CheckBatchStatusRequestWithHttpInfo(checkBatchStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CheckBatchStatus The operation is used to retrieve the status of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <returns>ApiResponse of CheckBatchStatusResponse</returns>
        public CityPayAPI.Client.ApiResponse<CheckBatchStatusResponse> CheckBatchStatusRequestWithHttpInfo(CheckBatchStatus checkBatchStatus)
        {
            // verify the required parameter 'checkBatchStatus' is set
            if (checkBatchStatus == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'checkBatchStatus' when calling BatchProcessingApi->CheckBatchStatusRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = checkBatchStatus;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CheckBatchStatusResponse>("/v6/batch/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckBatchStatusRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CheckBatchStatus The operation is used to retrieve the status of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckBatchStatusResponse</returns>
        public async System.Threading.Tasks.Task<CheckBatchStatusResponse> CheckBatchStatusRequestAsync(CheckBatchStatus checkBatchStatus, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CityPayAPI.Client.ApiResponse<CheckBatchStatusResponse> localVarResponse = await CheckBatchStatusRequestWithHttpInfoAsync(checkBatchStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// CheckBatchStatus The operation is used to retrieve the status of a batch process.
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkBatchStatus"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckBatchStatusResponse)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<CheckBatchStatusResponse>> CheckBatchStatusRequestWithHttpInfoAsync(CheckBatchStatus checkBatchStatus, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkBatchStatus' is set
            if (checkBatchStatus == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'checkBatchStatus' when calling BatchProcessingApi->CheckBatchStatusRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/xml"
            };


            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = checkBatchStatus;

            // authentication (cp-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CheckBatchStatusResponse>("/v6/batch/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckBatchStatusRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
