/* 
 * CityPay Payment API
 *
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * The version of the OpenAPI document: 6.0.0.BETA
 * Contact: support@citypay.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CityPayAPI.Client;
using CityPayAPI.Model;

namespace CityPayAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentProcessingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authorisation
        /// </summary>
        /// <remarks>
        /// An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Decision</returns>
        Decision AuthorisationRequest (InlineObject6 inlineObject6);

        /// <summary>
        /// Authorisation
        /// </summary>
        /// <remarks>
        /// An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>ApiResponse of Decision</returns>
        ApiResponse<Decision> AuthorisationRequestWithHttpInfo (InlineObject6 inlineObject6);
        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Acknowledgement</returns>
        Acknowledgement CaptureRequest (InlineObject2 inlineObject2);

        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        ApiResponse<Acknowledgement> CaptureRequestWithHttpInfo (InlineObject2 inlineObject2);
        /// <summary>
        /// Retrieval
        /// </summary>
        /// <remarks>
        /// A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>AuthReferences</returns>
        AuthReferences RetrievalRequest (InlineObject7 inlineObject7);

        /// <summary>
        /// Retrieval
        /// </summary>
        /// <remarks>
        /// A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>ApiResponse of AuthReferences</returns>
        ApiResponse<AuthReferences> RetrievalRequestWithHttpInfo (InlineObject7 inlineObject7);
        /// <summary>
        /// Void
        /// </summary>
        /// <remarks>
        /// _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>Acknowledgement</returns>
        Acknowledgement VoidRequest (InlineObject5 inlineObject5);

        /// <summary>
        /// Void
        /// </summary>
        /// <remarks>
        /// _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        ApiResponse<Acknowledgement> VoidRequestWithHttpInfo (InlineObject5 inlineObject5);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentProcessingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authorisation
        /// </summary>
        /// <remarks>
        /// An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of Decision</returns>
        System.Threading.Tasks.Task<Decision> AuthorisationRequestAsync (InlineObject6 inlineObject6);

        /// <summary>
        /// Authorisation
        /// </summary>
        /// <remarks>
        /// An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of ApiResponse (Decision)</returns>
        System.Threading.Tasks.Task<ApiResponse<Decision>> AuthorisationRequestAsyncWithHttpInfo (InlineObject6 inlineObject6);
        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of Acknowledgement</returns>
        System.Threading.Tasks.Task<Acknowledgement> CaptureRequestAsync (InlineObject2 inlineObject2);

        /// <summary>
        /// Capture
        /// </summary>
        /// <remarks>
        /// _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Acknowledgement>> CaptureRequestAsyncWithHttpInfo (InlineObject2 inlineObject2);
        /// <summary>
        /// Retrieval
        /// </summary>
        /// <remarks>
        /// A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of AuthReferences</returns>
        System.Threading.Tasks.Task<AuthReferences> RetrievalRequestAsync (InlineObject7 inlineObject7);

        /// <summary>
        /// Retrieval
        /// </summary>
        /// <remarks>
        /// A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of ApiResponse (AuthReferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthReferences>> RetrievalRequestAsyncWithHttpInfo (InlineObject7 inlineObject7);
        /// <summary>
        /// Void
        /// </summary>
        /// <remarks>
        /// _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of Acknowledgement</returns>
        System.Threading.Tasks.Task<Acknowledgement> VoidRequestAsync (InlineObject5 inlineObject5);

        /// <summary>
        /// Void
        /// </summary>
        /// <remarks>
        /// _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </remarks>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Acknowledgement>> VoidRequestAsyncWithHttpInfo (InlineObject5 inlineObject5);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentProcessingApi : IPaymentProcessingApiSync, IPaymentProcessingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentProcessingApi : IPaymentProcessingApi
    {
        private CityPayAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentProcessingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentProcessingApi(String basePath)
        {
            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                new CityPayAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentProcessingApi(CityPayAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CityPayAPI.Client.Configuration.MergeConfigurations(
                CityPayAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CityPayAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentProcessingApi(CityPayAPI.Client.ISynchronousClient client,CityPayAPI.Client.IAsynchronousClient asyncClient, CityPayAPI.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CityPayAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CityPayAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CityPayAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CityPayAPI.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPayAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authorisation An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Decision</returns>
        public Decision AuthorisationRequest (InlineObject6 inlineObject6)
        {
             CityPayAPI.Client.ApiResponse<Decision> localVarResponse = AuthorisationRequestWithHttpInfo(inlineObject6);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authorisation An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>ApiResponse of Decision</returns>
        public CityPayAPI.Client.ApiResponse< Decision > AuthorisationRequestWithHttpInfo (InlineObject6 inlineObject6)
        {
            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject6' when calling PaymentProcessingApi->AuthorisationRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject6;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Decision >("/authorise", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorisationRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorisation An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of Decision</returns>
        public async System.Threading.Tasks.Task<Decision> AuthorisationRequestAsync (InlineObject6 inlineObject6)
        {
             CityPayAPI.Client.ApiResponse<Decision> localVarResponse = await AuthorisationRequestAsyncWithHttpInfo(inlineObject6);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authorisation An authorisation process performs a standard transaction authorisation based on the provided parameters of its request. The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card  schemes such as Visa or MasterCard.  The authorisation API should be used for server environments to process transactions on demand and in realtime.   The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order, customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for  the appropriate coding and this will perform transparently by the gateway.   Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be  flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to   transact.    ### E-commerce workflows   For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism to handle authentication.  The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with Visa and MasterCard.  3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder  verification value (CAVV) as evidence of authorisation.   #### 3DSv1  &#x60;&#x60;&#x60;json {    \&quot;AuthenticationRequired\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;pareq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;,     \&quot;md\&quot;: \&quot;WQgZXZlcnl0aGluZyBiZW\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;AuthenticationRequired&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;pareq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/pareq&gt;  &lt;md&gt;WQgZXZlcnl0aGluZyBiZW&lt;/md&gt; &lt;/AuthenticationRequired&gt; &#x60;&#x60;&#x60;  For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the  card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. Should the card be enrolled, a payer  request (PAReq) value will be created and forwarded back as [authentication required](#authenticationrequired) response.   Your system will need to process this authentication  requirement to forward the end user&#39;s browser to an authentication server (ACS) to gain the user&#39;s authentication. The ACS will then perform a HTTP post back to your online site which should be forwarded back to this API for subsequent authorisation.   Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses this and will solidify the authorisation and confirmation process.  #### 3DSv2  &#x60;&#x60;&#x60;json {    \&quot;RequestChallenged\&quot;: {     \&quot;acsurl\&quot;: \&quot;https://bank.com/3DS/ACS\&quot;,     \&quot;creq\&quot;: \&quot;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\&quot;   }                } &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60;xml &lt;RequestChallenged&gt;  &lt;acsurl&gt;https://bank.com/3DS/ACS&lt;/acsurl&gt;  &lt;creq&gt;SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...&lt;/creq&gt; &lt;/RequestChallenged&gt; &#x60;&#x60;&#x60;  All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication  model (SCA) throughout 2020. This has been adopted by the payments industry as a progressive move alongside the European  Unions payments directive.  CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling out acquirers on the new platform from Q2 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate transactions in a \&quot;frictionless\&quot; flowed method which will authenticate low risk transactions with minimal impact to a  standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder.  Should a transaction however be \&quot;challenged\&quot; the API will return a [request challenge](#requestchallenged) which will  require your integration to forward the cardholder&#39;s browser to the given [ACS url](#acsurl) by posting the [creq](#creq) value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication. Our servers however will be awaiting confirmation that the authorisation should continue and on receipt of a [cres](#cres) value, the flow will perform a full authorisation.   Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes value will be validated for receipt of this value and subsequently may return back response codes illustrating this. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of ApiResponse (Decision)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Decision>> AuthorisationRequestAsyncWithHttpInfo (InlineObject6 inlineObject6)
        {
            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject6' when calling PaymentProcessingApi->AuthorisationRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject6;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Decision>("/authorise", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorisationRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Capture _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Acknowledgement</returns>
        public Acknowledgement CaptureRequest (InlineObject2 inlineObject2)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = CaptureRequestWithHttpInfo(inlineObject2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Capture _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        public CityPayAPI.Client.ApiResponse< Acknowledgement > CaptureRequestWithHttpInfo (InlineObject2 inlineObject2)
        {
            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling PaymentProcessingApi->CaptureRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject2;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Acknowledgement >("/capture", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CaptureRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Capture _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of Acknowledgement</returns>
        public async System.Threading.Tasks.Task<Acknowledgement> CaptureRequestAsync (InlineObject2 inlineObject2)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = await CaptureRequestAsyncWithHttpInfo(inlineObject2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Capture _The capture process only applies to transactions which have been pre-authorised only._   The capture process will ensure that a transaction will now settle. It is expected that a capture call will be provided within 3 days or a maximum of 7 days.  A capture request is provided to confirm that you wish the transaction to be settled. This request can contain a final amount for the transaction which is different to the original authorisation amount. This may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services provided before the final cost is known.  When a transaction is completed, a new authorisation code may be created and a new confirmation can be sent online to the acquiring bank.  Once the transaction has been processed. A standard [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. On a successful completion process, the transaction will be available for the settlement and completed at the end of the day. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Acknowledgement>> CaptureRequestAsyncWithHttpInfo (InlineObject2 inlineObject2)
        {
            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling PaymentProcessingApi->CaptureRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject2;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Acknowledgement>("/capture", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CaptureRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieval A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>AuthReferences</returns>
        public AuthReferences RetrievalRequest (InlineObject7 inlineObject7)
        {
             CityPayAPI.Client.ApiResponse<AuthReferences> localVarResponse = RetrievalRequestWithHttpInfo(inlineObject7);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieval A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>ApiResponse of AuthReferences</returns>
        public CityPayAPI.Client.ApiResponse< AuthReferences > RetrievalRequestWithHttpInfo (InlineObject7 inlineObject7)
        {
            // verify the required parameter 'inlineObject7' is set
            if (inlineObject7 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject7' when calling PaymentProcessingApi->RetrievalRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject7;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AuthReferences >("/retrieve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrievalRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieval A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of AuthReferences</returns>
        public async System.Threading.Tasks.Task<AuthReferences> RetrievalRequestAsync (InlineObject7 inlineObject7)
        {
             CityPayAPI.Client.ApiResponse<AuthReferences> localVarResponse = await RetrievalRequestAsyncWithHttpInfo(inlineObject7);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieval A retrieval request which allows an integration to obtain the result of a transaction processed in the last 90 days. The request allows for retrieval based on the identifier or transaction  number.   The process may return multiple results in particular where a transaction was processed multiple times against the same identifier. This can happen if errors were first received. The API therefore returns up to the first 5 transactions in the latest date time order.  It is not intended for this operation to be a replacement for reporting and only allows for base transaction information to be returned. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of ApiResponse (AuthReferences)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<AuthReferences>> RetrievalRequestAsyncWithHttpInfo (InlineObject7 inlineObject7)
        {
            // verify the required parameter 'inlineObject7' is set
            if (inlineObject7 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject7' when calling PaymentProcessingApi->RetrievalRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject7;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthReferences>("/retrieve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrievalRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>Acknowledgement</returns>
        public Acknowledgement VoidRequest (InlineObject5 inlineObject5)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = VoidRequestWithHttpInfo(inlineObject5);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Void _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of Acknowledgement</returns>
        public CityPayAPI.Client.ApiResponse< Acknowledgement > VoidRequestWithHttpInfo (InlineObject5 inlineObject5)
        {
            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling PaymentProcessingApi->VoidRequest");

            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };

            var localVarContentType = CityPayAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CityPayAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject5;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Acknowledgement >("/void", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of Acknowledgement</returns>
        public async System.Threading.Tasks.Task<Acknowledgement> VoidRequestAsync (InlineObject5 inlineObject5)
        {
             CityPayAPI.Client.ApiResponse<Acknowledgement> localVarResponse = await VoidRequestAsyncWithHttpInfo(inlineObject5);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Void _The void process generally applies to transactions which have been pre-authorised only however voids can occur  on the same day if performed before batching and settlement._   The void process will ensure that a transaction will now settle. It is expected that a void call will be  provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.  Once the transaction has been processed as a void, an [&#x60;Acknowledgement&#x60;](#acknowledgement) will be returned, outlining the result of the transaction. 
        /// </summary>
        /// <exception cref="CityPayAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of ApiResponse (Acknowledgement)</returns>
        public async System.Threading.Tasks.Task<CityPayAPI.Client.ApiResponse<Acknowledgement>> VoidRequestAsyncWithHttpInfo (InlineObject5 inlineObject5)
        {
            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new CityPayAPI.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling PaymentProcessingApi->VoidRequest");


            CityPayAPI.Client.RequestOptions localVarRequestOptions = new CityPayAPI.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/xml"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject5;

            // authentication (cp-api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("cp-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("cp-api-key", this.Configuration.GetApiKeyWithPrefix("cp-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Acknowledgement>("/void", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
